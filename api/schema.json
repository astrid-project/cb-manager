{
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "agent-catalog",
      "description": "Represents an agent in the catalog."
    },
    {
      "name": "agent-catalog",
      "description": "Represents an agent in the catalog."
    },
    {
      "name": "agent-instance",
      "description": "Represents an agent instance installed in an execution environment."
    },
    {
      "name": "agent-instance",
      "description": "Represents an agent instance installed in an execution environment."
    },
    {
      "name": "connection",
      "description": "Represents an connection between execution environments and network links."
    },
    {
      "name": "connection",
      "description": "Represents an connection between execution environments and network links."
    },
    {
      "name": "data",
      "description": "Represents stored data."
    },
    {
      "name": "data",
      "description": "Represents stored data."
    },
    {
      "name": "exec-env",
      "description": "Represents an execution environment."
    },
    {
      "name": "exec-env",
      "description": "Represents an execution environment."
    },
    {
      "name": "exec-env-type",
      "description": "Represents an execution environment type."
    },
    {
      "name": "exec-env-type",
      "description": "Represents an execution environment type."
    },
    {
      "name": "network-link",
      "description": "Represents a network link."
    },
    {
      "name": "network-link",
      "description": "Represents a network link."
    },
    {
      "name": "network-link-type",
      "description": "Represents a network link type."
    },
    {
      "name": "network-link-type",
      "description": "Represents a network link type."
    },
    "package"
  ],
  "paths": {
    "/catalog/": {
      "delete": {
        "summary": "Agent Delete (Multiple)",
        "description": "Delete agents filtered by the query in the request body from the catalog.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agents filtered by the query in the request body deleted from the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Agent Read (Multiple)",
        "description": "Get the list of agents in the catalog filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "List of agents in the catalog filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Agent Creation (Multiple)",
        "description": "Add new agents to the catalog",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agents inserted in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Agent Update (Multiple)",
        "description": "Update agents in the catalog.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agents updated in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/catalog/ebpf/": {
      "delete": {
        "summary": "Agent Delete (Multiple)",
        "description": "Delete agents filtered by the query in the request body from the catalog.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agents filtered by the query in the request body deleted from the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Agent Read (Multiple)",
        "description": "Get the list of agents in the catalog filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "List of agents in the catalog filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Agent Creation (Multiple)",
        "description": "Add new agents to the catalog",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agents inserted in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Agent Update (Multiple)",
        "description": "Update agents in the catalog.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agents updated in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/catalog/{id}": {
      "delete": {
        "summary": "Agent Delete (Single)",
        "description": "Delete the agent with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agent with the given `id` and filtered by the query in the request body deleted from the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Agent Read (Single)",
        "description": "Get the agent in the catalog with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agent in the catalog with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Agent Creation (Single)",
        "description": "Add a new agent in the catalog with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agent with the given `id` inserted in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Agent Update (Single)",
        "description": "Update the agent in the catalog with the given `id`",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agent with the given `id` updated in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/catalog/ebpf/{id}": {
      "delete": {
        "summary": "Agent Delete (Single)",
        "description": "Delete the agent with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agent with the given `id` and filtered by the query in the request body deleted from the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Agent Read (Single)",
        "description": "Get the agent in the catalog with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agent in the catalog with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Agent Creation (Single)",
        "description": "Add a new agent in the catalog with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agent with the given `id` inserted in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Agent Update (Single)",
        "description": "Update the agent in the catalog with the given `id`",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agent with the given `id` updated in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config/agent/": {
      "delete": {
        "summary": "Agent Instance Uninstall (Multiple)",
        "description": "Remove the agent instances filtered by the query in the request body from the execution-environments.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instances filtered by the query in the request body uninstalled.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Agent Instance Read (Multiple)",
        "description": "Get the list of agent instances installed in the execution-environments filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "List of agent instances installed in the execution-environment filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstance"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Agent Instance Install (Multiple)",
        "description": "Install new agent instances in the execution-environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstance"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instances installed in the execution environments.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Agent Instance Update (Multiple)",
        "description": "Update the agent instances in the execution-environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstance"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instances updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config/agent/{id}": {
      "delete": {
        "summary": "Agent Instance Uninstall (Single)",
        "description": "Remove the agent instance with the given `id` and filtered by the query in the request body from the execution-environments.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instance with the given `id` and filtered by the query in the request body uninstalled.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Agent Instance Read (Single)",
        "description": "Get the agent instance with the given `id` installed in the execution-environments filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instance with the given `id` installed in the execution-environment filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstance"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Agent Instance Install (Single)",
        "description": "Install a new agent instance in the execution-environments with the given `id` .",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstance"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instance with the given `id`  installed in the execution environments.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Agent Instance Update (Single)",
        "description": "Update the agent instance in the execution-environments with the given `id` .",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstance"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instance with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config/connection/": {
      "delete": {
        "summary": "Connection Delete (Multiple)",
        "description": "Delete the connections between execution environments and network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Connections between execution environments and network links filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Connection Read (Multiple)",
        "description": "Get the list of connections between execution environments and network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "List of connections between execution environments and network links filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Connection Creation (Multiple)",
        "description": "Install new connections between execution environments and network links.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Connections created between execution environments and network links.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Connection Update (Multiple)",
        "description": "Update the connections between execution environments and network links.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Connections updated between execution environments and network links.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config/connection/{id}": {
      "delete": {
        "summary": "Connection Delete (Single)",
        "description": "Delete the connection between execution environments and network links with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Connection between execution environments and network links with the given `id` filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Connection Read (Single)",
        "description": "Get the connection between execution environments with the given `id` and network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Connection between execution environments and network links with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Connection Creation (Single)",
        "description": "Install a new connection between execution environments and network links with the given `id`.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Connections created between execution environments and network links.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Connection Update (Single)",
        "description": "Update the connection between execution environments and network links with the given `id`.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Connection between execution environments and network links with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/data/": {
      "delete": {
        "summary": "Data Delete (Multiple)",
        "description": "Delete data filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Data Read (Multiple)",
        "description": "Get the list of data filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "List of data filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Data Insert (Multiple)",
        "description": "Insert new data.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data inserted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Data Update (Multiple)",
        "description": "Update data.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/data/{id}": {
      "delete": {
        "summary": "Data Delete (Single)",
        "description": "Delete data with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data with the given `id` and filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Data Read (Single)",
        "description": "Get the data with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Data Insert (Single)",
        "description": "Insert new data with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data with the given `id` inserted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Data Update (Single)",
        "description": "Update data with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config/exec-env/": {
      "delete": {
        "summary": "Execution Environment Delete (Multiple)",
        "description": "Delete execution environments filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environments filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Execution Environment Read (Multiple)",
        "description": "Get the list of execution environments filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "List of execution environments filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnv"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Execution Environment Creation (Multiple)",
        "description": "Create new execution environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnv"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environments created.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Execution Environment Update (Multiple)",
        "description": "Update execution environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnv"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environments updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config/exec-env/{id}": {
      "delete": {
        "summary": "Execution Environment Delete (Single)",
        "description": "Delete the execution environment with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environment with the given `id` and filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Execution Environment Read (Single)",
        "description": "Get the execution environment with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environment with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnv"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Execution Environment Creation (Single)",
        "description": "Create a new execution environment with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnv"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environment with the given `id` created.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Execution Environment Update (Single)",
        "description": "Update the execution environment with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnv"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environment with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config/exec-env-type/": {
      "delete": {
        "summary": "Execution Environment Type Delete (Multiple)",
        "description": "Delete execution environment types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment types filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Execution Environment Type Read (Multiple)",
        "description": "Get the list of execution environment types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "List of execution environment types filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvType"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Execution Environment Type Creation (Multiple)",
        "description": "Create new execution environment types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvType"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment types created.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Execution Environment Type Update (Multiple)",
        "description": "Update execution environment types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvType"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment types updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config/exec-env-type/{id}": {
      "delete": {
        "summary": "Execution Environment Type Delete (Single)",
        "description": "Delete the execution environment type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment type with the given `id` and filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Execution Environment Type Read (Single)",
        "description": "Get the execution environment type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment type with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvType"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Execution Environment Type Creation (Single)",
        "description": "Create new execution environment type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvType"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment type with the given `id` created.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Execution Environment Type Update (Single)",
        "description": "Update the execution environment type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvType"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment type with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config/network-link/": {
      "delete": {
        "summary": "Network Link Delete (Multiple)",
        "description": "Delete network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network links filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Network Link Read (Multiple)",
        "description": "Get the list of network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "List of network links filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLink"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Network Link Creation (Multiple)",
        "description": "Create new network links.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLink"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network links created.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Network Link Update (Multiple)",
        "description": "Update network links.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLink"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network links updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config/network-link/{id}": {
      "delete": {
        "summary": "Network Link Delete (Single)",
        "description": "Delete the network link with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network link with the given `id` and filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Network Link Read (Single)",
        "description": "Get the network link with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network link with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLink"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Network Link Creation (Single)",
        "description": "Create a new network link with the given `id` .",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLink"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network link with the given `id` created.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Network Link Update (Single)",
        "description": "Update the network link with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLink"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network link with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config/network-link-type/": {
      "delete": {
        "summary": "Network Link Type Delete (Multiple)",
        "description": "Delete network link types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link types filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Network Link Type Read (Multiple)",
        "description": "Get the list of network link types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "List of network link types filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkType"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Network Link Type Creation (Multiple)",
        "description": "Create new network link types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkType"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link types created.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Network Link Type Update (Multiple)",
        "description": "Update network link types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkType"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link types updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config/network-link-type/{id}": {
      "delete": {
        "summary": "Network Link Type Delete (Single)",
        "description": "Delete the network link type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link type with the given `id` and filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Network Link Type Read (Single)",
        "description": "Get the network link type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link type with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkType"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Network Link Type Creation (Single)",
        "description": "Create a new network link type with the given `id` .",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkType"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link type with the given `id` created.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Network Link Type Update (Single)",
        "description": "Update the network link type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkType"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link type with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/pkg/{name}": {
      "get": {
        "summary": "Download the package",
        "description": "Download the package",
        "tags": "package",
        "responses": {
          "200": {
            "description": "Download of the file completed.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "ASTRID Context Broker API",
    "version": "0.0.2"
  },
  "swagger": "2.0",
  "definitions": {
    "QueryRequestFilter": {
      "type": "object",
      "properties": {
        "expr": {
          "type": "string",
          "description": "The expression to compare to the field.",
          "example": "apache"
        },
        "target": {
          "type": "string",
          "description": "The field to compare.",
          "example": "name"
        }
      },
      "required": [
        "expr",
        "target"
      ]
    },
    "QueryRequestClause": {
      "type": "object",
      "properties": {
        "reg_exp": {
          "description": "The target field must be satisfy the regular expression in expr.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilter"
            }
          ]
        },
        "lte": {
          "description": "The target field must be lower or equal to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilter"
            }
          ]
        },
        "and": {
          "description": "All the clause has to be satisfied.",
          "example": "\n                            [\n                                {\n                                    \"equal\": {\n                                        \"target\": \"name\",\n                                        \"expr:\": \"apache\"\n                                        }\n                                    },\n                                    {\n                                    \"lte\": {\n                                        \"target\": \"timeout\",\n                                        \"expr\": 5\n                                    }\n                            ]",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRequestClause"
          }
        },
        "gt": {
          "description": "The target field must be greater to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilter"
            }
          ]
        },
        "gte": {
          "description": "The target field must be greater or equal to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilter"
            }
          ]
        },
        "equal": {
          "description": "The target field must be equal to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilter"
            }
          ]
        },
        "lt": {
          "description": "The target field must be lower than the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilter"
            }
          ]
        },
        "or": {
          "description": "At least the clause has to be satisfied.",
          "example": "\n                            [\n                                {\n                                    \"equal\": {\n                                        \"target\": \"name\",\n                                        \"expr:\": \"apache\"\n                                        }\n                                    },\n                                    {\n                                    \"lte\": {\n                                        \"target\": \"timeout\",\n                                        \"expr\": 5\n                                    }\n                            ]",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRequestClause"
          }
        },
        "not": {
          "description": "The clause has to be not satisfied.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestClause"
            }
          ]
        }
      }
    },
    "QueryRequestLimit": {
      "type": "object",
      "properties": {
        "to": {
          "type": "integer",
          "format": "int32",
          "description": "Ended index of the items to return.",
          "example": 5
        },
        "from": {
          "type": "integer",
          "format": "int32",
          "description": "Started index of the items to return.",
          "example": 1
        }
      }
    },
    "QueryRequestOrder": {
      "type": "object",
      "properties": {
        "mode": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "description": "Order mode.",
          "example": "asc"
        },
        "target": {
          "type": "string",
          "description": "The field to compare.",
          "example": "name"
        }
      },
      "required": [
        "mode",
        "target"
      ]
    },
    "QueryRequest": {
      "type": "object",
      "properties": {
        "where": {
          "description": "Filter the items based on different conditions.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestClause"
            }
          ]
        },
        "limit": {
          "description": "Limit the number of items to return.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestLimit"
            }
          ]
        },
        "select": {
          "type": "array",
          "description": "Fields to return.",
          "example": "[id, name]",
          "items": {
            "type": "string"
          }
        },
        "order": {
          "description": "Order the filtered items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRequestOrder"
          }
        }
      }
    },
    "HTTPError": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title error",
          "example": "400 Bad Request"
        },
        "description": {
          "type": "string",
          "description": "Human readable message that describes the error.",
          "example": "Could not decode the request body, either because it was not valid JSON or because it was not encoded as UTF-8."
        }
      },
      "required": [
        "description",
        "title"
      ]
    },
    "RecipeResource": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "Resource content."
        },
        "destination": {
          "type": "string",
          "description": "Destination filename",
          "example": "filebeat.yml"
        }
      },
      "required": [
        "content",
        "destination"
      ]
    },
    "RecipeParameter": {
      "type": "object",
      "properties": {
        "sep": {
          "type": "string",
          "description": "Separator between name and value.",
          "example": "="
        },
        "name": {
          "type": "string",
          "description": "Parameter name.",
          "example": "period"
        },
        "value": {
          "type": "string",
          "description": "Parameter new value.",
          "example": "10s"
        },
        "destination": {
          "type": "string",
          "description": "Destination filename.",
          "example": "filebeat.yml"
        }
      },
      "required": [
        "destination",
        "name",
        "sep",
        "value"
      ]
    },
    "RecipeAction": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "string",
          "description": "Command."
        },
        "args": {
          "type": "array",
          "description": "Command arguments.",
          "items": {
            "type": "string",
            "description": "Single command argument.",
            "example": "-al"
          }
        }
      },
      "required": [
        "cmd"
      ]
    },
    "Recipe": {
      "type": "object",
      "properties": {
        "resources": {
          "description": "Resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecipeResource"
          }
        },
        "parameters": {
          "description": "Parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecipeParameter"
          }
        },
        "actions": {
          "description": "Actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecipeAction"
          }
        }
      }
    },
    "AgentCatalogParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Parameter name",
          "example": "period"
        },
        "type": {
          "type": "string",
          "enum": [
            "integer",
            "number",
            "time-duration",
            "string",
            "choice",
            "boolean",
            "binary"
          ],
          "description": "Parameter type.",
          "example": "integer"
        },
        "list": {
          "type": "boolean",
          "description": "Indicate if the parameter can have multiple values.",
          "example": true
        },
        "recipe": {
          "description": "Parameter recipe",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recipe"
          }
        },
        "values": {
          "type": "array",
          "description": "Possible values if the parameter type is choice.",
          "items": {
            "type": "string",
            "example": [
              "mysql",
              "http"
            ]
          }
        }
      },
      "required": [
        "name",
        "recipe",
        "type"
      ]
    },
    "AgentCatalogAction": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "start",
            "stop",
            "install",
            "uninstall"
          ],
          "description": "Action name",
          "example": "start"
        },
        "recipe": {
          "description": "Action recipe",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recipe"
          }
        }
      },
      "required": [
        "name",
        "recipe"
      ]
    },
    "AgentCatalog": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Agent name.",
          "example": "filebeat"
        },
        "parameters": {
          "description": "Parameter properties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentCatalogParameter"
          }
        },
        "id": {
          "type": "string",
          "description": "ID of the agent in the catalog.",
          "example": "uyPMaXABjPI5oepgjezR"
        },
        "actions": {
          "description": "Action properties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentCatalogAction"
          }
        }
      },
      "required": [
        "actions",
        "id",
        "name",
        "parameters"
      ]
    },
    "AgentInstanceParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Parameter name",
          "example": "period"
        },
        "value": {
          "type": "string",
          "description": "Paremeter value",
          "example": "10s"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "AgentInstance": {
      "type": "object",
      "properties": {
        "parameters": {
          "description": "List of agent instance parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentInstanceParameter"
          }
        },
        "id": {
          "type": "string",
          "description": "ID of the agent instance installed in an execution environment.",
          "example": "uyPMaXABjPI5oepgjezR"
        },
        "agent_catalog_id": {
          "type": "string",
          "description": "ID of the agent in the catalog",
          "example": "23jqlaJVPCGa4C0o6ljn"
        },
        "status": {
          "type": "string",
          "enum": [
            "start",
            "stop"
          ],
          "description": "Status of the agent instance",
          "example": "start"
        },
        "exec_env_id": {
          "type": "string",
          "description": "ID of the execution environment where the agent instance is installed",
          "example": "0xUosnMTCgO5FgVZLbQs"
        }
      },
      "required": [
        "agent_catalog_id",
        "exec_env_id",
        "id",
        "status"
      ]
    },
    "Connection": {
      "type": "object",
      "properties": {
        "exec_env_id": {
          "type": "string",
          "description": "ID of the connected execution environment",
          "example": "1V4nbnfz981Mn95RPtTr"
        },
        "network_link_id": {
          "type": "string",
          "description": "ID of the connected network link",
          "example": "JAwfDEY7f2AtiEldMjPW"
        },
        "id": {
          "type": "string",
          "description": "ID of connection.",
          "example": "aZ0aLlJ5Cq84Hsy3SyTW"
        }
      },
      "required": [
        "exec_env_id",
        "id",
        "network_link_id"
      ]
    },
    "Data": {
      "type": "object",
      "properties": {
        "timestamp_agent": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the agent instance collected the data",
          "example": "2019_02_14 15:23:30"
        },
        "id": {
          "type": "string",
          "description": "ID of the data.",
          "example": "BXrHRn5RPU55Qh9JwMZn"
        },
        "timestamp_event": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the event related to the collected data",
          "example": "2019_02_14 15:23:30"
        },
        "agent_instance_id": {
          "type": "string",
          "description": "ID of the agent instance in the execution environment that collected the data",
          "example": "EHiirlGzEiU29VTdovTo"
        },
        "exec_env_id": {
          "type": "string",
          "description": "ID of the execution environment where the data was collected",
          "example": "MUgzilTNtWbQEaPjBZyv"
        }
      },
      "required": [
        "id"
      ]
    },
    "LCP": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username to connect from the CB to the LCP.",
          "example": "22c6d368beabf9de1ea03e010010758a394c37c3b18aa0705b8634f5"
        },
        "cb_expiration": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime until the authentication with the CB is valid.",
          "example": "2019_02_14 15:23:30"
        },
        "last_hearbeat": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the last hearbeat between the LCP and CB.",
          "example": "2019_02_14 15:23:30"
        },
        "password": {
          "type": "string",
          "description": "Password to connect from the CB to the LCP.",
          "example": "22c6d368beabf9de1ea03e010010758a394c37c3b18aa0705b8634f5"
        },
        "cb_password": {
          "type": "string",
          "description": "Hashed password assigned to LCP to connect with the CB.",
          "example": "22c6d368beabf9de1ea03e010010758a394c37c3b18aa0705b8634f5"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "TCP port number of LCP in the execution environment.",
          "example": 5000
        }
      },
      "required": [
        "port"
      ]
    },
    "ExecEnv": {
      "type": "object",
      "properties": {
        "type_id": {
          "type": "string",
          "description": "ID of the execution environment type.",
          "example": "vm"
        },
        "lcp": {
          "description": "Data related to the LCP",
          "allOf": [
            {
              "$ref": "#/definitions/LCP"
            }
          ]
        },
        "id": {
          "type": "string",
          "description": "ID of the execution environment.",
          "example": "PiOIb3ABjPI5oepgse1C"
        },
        "hostname": {
          "type": "string",
          "description": "Hostname of the execution environment.",
          "example": "192.168.1.2"
        }
      },
      "required": [
        "hostname",
        "id",
        "lcp",
        "type_id"
      ]
    },
    "ExecEnvType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the execution environment.",
          "example": "Virtual Machine"
        },
        "id": {
          "type": "string",
          "description": "ID of the execution environment type.",
          "example": "vm"
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "NetworkLink": {
      "type": "object",
      "properties": {
        "type_id": {
          "type": "string",
          "description": "ID of the network link type.",
          "example": "pnt2pnt"
        },
        "id": {
          "type": "string",
          "description": "ID of the network link.",
          "example": "x4fgctkm4MXQOUHYjIag"
        }
      },
      "required": [
        "id",
        "type_id"
      ]
    },
    "NetworkLinkType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the network link type.",
          "example": "Point to point"
        },
        "id": {
          "type": "string",
          "description": "ID of the network link type.",
          "example": "pnt2pnt"
        }
      },
      "required": [
        "id",
        "name"
      ]
    }
  }
}