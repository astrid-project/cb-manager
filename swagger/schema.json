{
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "agent-catalog",
      "description": "Represents an agent in the catalog."
    },
    {
      "name": "agent-catalog",
      "description": "Represents an agent in the catalog."
    },
    {
      "name": "agent-instance",
      "description": "Represents an agent instance installed in an execution environment."
    },
    {
      "name": "agent-instance",
      "description": "Represents an agent instance installed in an execution environment."
    },
    {
      "name": "connection",
      "description": "Represents an connection between execution environments and network links."
    },
    {
      "name": "connection",
      "description": "Represents an connection between execution environments and network links."
    },
    {
      "name": "data",
      "description": "Represents the stored data."
    },
    {
      "name": "data",
      "description": "Represents the stored data."
    },
    {
      "name": "ebpf-program-catalog",
      "description": "Represents an eBPF program in the catalog."
    },
    {
      "name": "ebpf-program-catalog",
      "description": "Represents an eBPF program in the catalog."
    },
    {
      "name": "ebpf-program-instance",
      "description": "Represents an eBPF program installed in an execution environment."
    },
    {
      "name": "ebpf-program-instance",
      "description": "Represents an eBPF program installed in an execution environment."
    },
    {
      "name": "exec-env",
      "description": "Represents an execution environment."
    },
    {
      "name": "exec-env",
      "description": "Represents an execution environment."
    },
    {
      "name": "exec-env-type",
      "description": "Represents an execution environment type."
    },
    {
      "name": "exec-env-type",
      "description": "Represents an execution environment type."
    },
    {
      "name": "network-link",
      "description": "Represents a network link."
    },
    {
      "name": "network-link",
      "description": "Represents a network link."
    },
    {
      "name": "network-link-type",
      "description": "Represents a network link type."
    },
    {
      "name": "network-link-type",
      "description": "Represents a network link type."
    }
  ],
  "paths": {
    "/catalog/agent/": {
      "delete": {
        "summary": "Agent Delete (Multiple)",
        "description": "Delete agents filtered by the query in the request body from the catalog.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agents filtered by the query in the request body deleted from the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Agent Read (Multiple)",
        "description": "Get the list of agents in the catalog filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "List of agents in the catalog filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Agent Creation (Multiple)",
        "description": "Add new agents to the catalog",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agents inserted in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Agent Update (Multiple)",
        "description": "Update agents in the catalog.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agents updated in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/catalog/{id}": {
      "delete": {
        "summary": "Agent Delete (Single)",
        "description": "Delete the agent with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agent with the given `id` and filtered by the query in the request body deleted from the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Agent Read (Single)",
        "description": "Get the agent in the catalog with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agent in the catalog with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Agent Creation (Single)",
        "description": "Add a new agent in the catalog with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Add a new agent in the catalog with the given `id`.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Agent Update (Single)",
        "description": "Update the agent in the catalog with the given `id`",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "Agent with the given `id` updated in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/instance/agent/": {
      "delete": {
        "summary": "Agent Instance Deletetion (Multiple)",
        "description": "Remove the agent instances filtered by the query in the request body from the execution-environments.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instances filtered by the query in the request body uninstalled.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Agent Instance Read (Multiple)",
        "description": "Get the list of agent instances installed in the execution-environments filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "List of agent instances installed in the execution-environment filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstance"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Agent Instance Creation (Multiple)",
        "description": "Create new agent instances in the execution-environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstance"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instances installed in the execution environments.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Agent Instance Update (Multiple)",
        "description": "Update the agent instances in the execution-environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstance"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instances updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/instance/agent/{id}": {
      "delete": {
        "summary": "Agent Instance Deletion (Single)",
        "description": "Remove the agent instance with the given `id` and filtered by the query in the request body from the execution-environments.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instance with the given `id` and filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Agent Instance Read (Single)",
        "description": "Get the agent instance with the given `id` installed in the execution-environments filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instance with the given `id` installed in the execution-environment filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstance"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Agent Instance Creation (Single)",
        "description": "Install a new agent instance in the execution-environments with the given `id` .",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstance"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Install a new agent instance in the execution-environments with the given `id` .",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Agent Instance Update (Single)",
        "description": "Update the agent instance in the execution-environments with the given `id` .",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstance"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "Agent instance with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/connection/": {
      "delete": {
        "summary": "Connection Delete (Multiple)",
        "description": "Delete the connections between execution environments and network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Connections between execution environments and network links filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Connection Read (Multiple)",
        "description": "Get the list of connections between execution environments and network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "List of connections between execution environments and network links filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Connection Creation (Multiple)",
        "description": "Install new connections between execution environments and network links.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Connections created between execution environments and network links.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/connection/{id}": {
      "delete": {
        "summary": "Connection Delete (Single)",
        "description": "Delete the connection between execution environments and network links with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Connection between execution environments and network links with the given `id` filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Connection Read (Single)",
        "description": "Get the connection between execution environments with the given `id` and network links filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Connection between execution environments and network links with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Connection Creation (Single)",
        "description": "Install a new connection between execution environments and network links with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Install a new connection between execution environments and network links with the given `id`.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Connection Update (Single)",
        "description": "Update the connection between execution environments and network links with the given `id`",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "Connection between execution environments and network links with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/data/": {
      "delete": {
        "summary": "Data Delete (Multiple)",
        "description": "Delete data filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Data Read (Multiple)",
        "description": "Get the list of data filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "List of data filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Data Insert (Multiple)",
        "description": "Insert new data.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data inserted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Data Update (Multiple)",
        "description": "Update data.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/data/{id}": {
      "delete": {
        "summary": "Data Delete (Single)",
        "description": "Delete data with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data with the given `id` and filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Data Read (Single)",
        "description": "Get the data with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Data Insert (Single)",
        "description": "Insert new data with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Insert new data with the given `id`.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Data Update (Single)",
        "description": "Update data with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "Data with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/catalog/ebpf-program/": {
      "delete": {
        "summary": "eBPF Program Delete (Multiple)",
        "description": "Delete eBPF Programs filtered by the query in the request body from the catalog.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "eBPF programs filtered by the query in the request body deleted from the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "eBPF Program Read (Multiple)",
        "description": "Get the list of eBPF programs in the catalog filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "List of eBPF programs in the catalog filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPFProgramCatalog"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "eBPF Program Creation (Multiple)",
        "description": "Add new eBPF programs to the catalog",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPFProgramCatalog"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "eBPF programs inserted in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "eBPF Program Update (Multiple)",
        "description": "Update eBPF programs in the catalog.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPFProgramCatalog"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "eBPF programs updated in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/catalog/ebpf-program/{id}": {
      "delete": {
        "summary": "eBPF Program Delete (Single)",
        "description": "Delete the eBPF program with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "eBPF Program with the given `id` and filtered by the query in the request body deleted from the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "eBPF Program Read (Single)",
        "description": "Get the eBPF program in the catalog with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "eBPF Program in the catalog with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPFProgramCatalog"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "eBPF Program Creation (Single)",
        "description": "Add a new eBPF program in the catalog with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPFProgramCatalog"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "Add a new eBPF program in the catalog with the given `id`.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "eBPF Program Update (Single)",
        "description": "Update the eBPF program in the catalog with the given `id`",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPFProgramCatalog"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "eBPF Program with the given `id` updated in the catalog.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/instance/ebpf-program/": {
      "delete": {
        "summary": "eBPF Program Uninstall (Multiple)",
        "description": "Remove the eBPF program instances filtered by the query in the request body from the execution-environments.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "eBPF programs filtered by the query in the request body uninstalled.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "eBPF Program Read (Multiple)",
        "description": "Get the list of eBPF program instances installed in the execution-environments filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "List of eBPF program instances installed in the execution-environment filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPFProgramInstance"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "eBPF Program Install (Multiple)",
        "description": "Install new eBPF program instances in the execution-environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPFProgramInstance"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "eBPF program installed in the execution environments.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "eBPF Program Update (Multiple)",
        "description": "Update the eBPF program instances in the execution-environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPFProgramInstance"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "eBPF programs updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/instance/ebpf-program/{id}": {
      "delete": {
        "summary": "eBPF Program Instance Deletion (Single)",
        "description": "Remove the eBPF Program instance with the given `id` and filtered by the query in the request body from the execution-environments.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "eBPF program instance with the given `id` and filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "eBPF Program Instance Read (Single)",
        "description": "Get the eBPF Program instance with the given `id` installed in the execution-environments filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "eBPF program instance with the given `id` installed in the execution-environment filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPFProgramInstance"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "eBPF Program Instance Creation (Single)",
        "description": "Install a new eBPF Program instance in the execution-environments with the given `id` .",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPFProgramInstance"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "Install a new eBPF Program instance in the execution-environments with the given `id` .",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "eBPF Program Instance Update (Single)",
        "description": "Update the eBPF Program instance in the execution-environments with the given `id` .",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPFProgramInstance"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "eBPF Program instance with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/exec-env/": {
      "delete": {
        "summary": "Execution Environment Delete (Multiple)",
        "description": "Delete execution environments filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environments filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Execution Environment Read (Multiple)",
        "description": "Get the list of execution environments filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "List of execution environments filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnv"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Execution Environment Creation (Multiple)",
        "description": "Create new execution environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnv"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environments created.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Execution Environment Update (Multiple)",
        "description": "Update execution environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnv"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environments updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/exec-env/{id}": {
      "delete": {
        "summary": "Execution Environment Delete (Single)",
        "description": "Delete the execution environment with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environment with the given `id` and filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Execution Environment Read (Single)",
        "description": "Get the execution environment with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environment with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnv"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Execution Environment Creation (Single)",
        "description": "Create a new execution environment with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnv"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Create a new execution environment with the given `id`.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Execution Environment Update (Single)",
        "description": "Update the execution environment with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnv"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "Execution environment with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/type/exec-env/": {
      "delete": {
        "summary": "Execution Environment Type Delete (Multiple)",
        "description": "Delete execution environment types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment types filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Execution Environment Type Read (Multiple)",
        "description": "Get the list of execution environment types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "List of execution environment types filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvType"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Execution Environment Type Creation (Multiple)",
        "description": "Create new execution environment types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvType"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment types created.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Execution Environment Type Update (Multiple)",
        "description": "Update execution environment types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvType"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment types updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/exec-env-type/{id}": {
      "delete": {
        "summary": "Execution Environment Type Delete (Single)",
        "description": "Delete the execution environment type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment type with the given `id` and filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Execution Environment Type Read (Single)",
        "description": "Get the execution environment type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment type with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvType"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Execution Environment Type Creation (Single)",
        "description": "Create new execution environment type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvType"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Create new execution environment type with the given `id`.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Execution Environment Type Update (Single)",
        "description": "Update the execution environment type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvType"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "Execution environment type with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/network-link/": {
      "delete": {
        "summary": "Network Link Delete (Multiple)",
        "description": "Delete network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network links filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Network Link Read (Multiple)",
        "description": "Get the list of network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "List of network links filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLink"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Network Link Creation (Multiple)",
        "description": "Create new network links.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLink"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network links created.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Network Link Update (Multiple)",
        "description": "Update network links.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLink"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network links updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/network-link/{id}": {
      "delete": {
        "summary": "Network Link Delete (Single)",
        "description": "Delete the network link with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network link with the given `id` and filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Network Link Read (Single)",
        "description": "Get the network link with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network link with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLink"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Network Link Creation (Single)",
        "description": "Create a new network link with the given `id` .",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLink"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Create a new network link with the given `id` .",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Network Link Update (Single)",
        "description": "Update the network link with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLink"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "Network link with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/type/network-link/": {
      "delete": {
        "summary": "Network Link Type Delete (Multiple)",
        "description": "Delete network link types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link types filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Network Link Type Read (Multiple)",
        "description": "Get the list of network link types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "List of network link types filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkType"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Network Link Type Creation (Multiple)",
        "description": "Create new network link types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkType"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link types created.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Network Link Type Update (Multiple)",
        "description": "Update network link types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkType"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link types updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/type/network-link/{id}": {
      "delete": {
        "summary": "Network Link Type Delete (Single)",
        "description": "Delete the network link type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link type with the given `id` and filtered by the query in the request body deleted.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "get": {
        "summary": "Network Link Type Read (Single)",
        "description": "Get the network link type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequest"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link type with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkType"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Network Link Type Creation (Single)",
        "description": "Create a new network link type with the given `id` .",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkType"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Create a new network link type with the given `id` .",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Network Link Type Update (Single)",
        "description": "Update the network link type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkType"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "Network link type with the given `id` updated.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "ResponseSchema",
                  "ErrorSchema"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "Context Broker Manager",
    "version": "74380d53bc07b788a5d2d59a40216dc482c5cb7c@master"
  },
  "swagger": "2.0",
  "definitions": {
    "QueryRequestFilter": {
      "type": "object",
      "properties": {
        "target": {
          "type": "string",
          "example": "id",
          "description": "The field to compare."
        },
        "expr": {
          "type": "string",
          "example": "apache",
          "description": "The expression to compare to the field."
        }
      },
      "required": [
        "expr",
        "target"
      ]
    },
    "QueryRequestClause": {
      "type": "object",
      "properties": {
        "lt": {
          "description": "The target field must be lower than the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilter"
            }
          ]
        },
        "gte": {
          "description": "The target field must be greater or equal to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilter"
            }
          ]
        },
        "gt": {
          "description": "The target field must be greater to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilter"
            }
          ]
        },
        "reg_exp": {
          "description": "The target field must be satisfy the regular expression in expr.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilter"
            }
          ]
        },
        "not": {
          "description": "The clause has to be not satisfied.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestClause"
            }
          ]
        },
        "and": {
          "description": "All the clause has to be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRequestClause"
          }
        },
        "or": {
          "description": "At least the clause has to be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRequestClause"
          }
        },
        "equals": {
          "description": "The target field must be equal to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilter"
            }
          ]
        },
        "lte": {
          "description": "The target field must be lower or equal to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilter"
            }
          ]
        }
      }
    },
    "QueryRequestOrder": {
      "type": "object",
      "properties": {
        "mode": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "description": "Order mode.",
          "example": "desc"
        },
        "target": {
          "type": "string",
          "example": "name",
          "description": "The field to compare."
        }
      },
      "required": [
        "mode",
        "target"
      ]
    },
    "QueryRequestLimit": {
      "type": "object",
      "properties": {
        "from": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Started index of the items to return."
        },
        "to": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Ended index of the items to return."
        }
      }
    },
    "QueryRequest": {
      "type": "object",
      "properties": {
        "where": {
          "description": "Filter the items based on different conditions.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestClause"
            }
          ]
        },
        "order": {
          "description": "Order the filtered items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRequestOrder"
          }
        },
        "select": {
          "type": "string",
          "description": "Fields to return.",
          "example": "id"
        },
        "limit": {
          "description": "Limit the number of items to return.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestLimit"
            }
          ]
        }
      }
    },
    "HTTPError": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title error",
          "example": "400 Bad Request"
        },
        "description": {
          "type": "string",
          "description": "Human readable message that describes the error.",
          "example": "Could not decode the request body, either because it was not\n                                 valid JSON or because it was not encoded as UTF-8."
        }
      },
      "required": [
        "description",
        "title"
      ]
    },
    "AgentCatalogActionConfig": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "description": "Action command argument",
          "example": "-v"
        },
        "cmd": {
          "type": "string",
          "description": "Action command.",
          "example": "service filebeat start"
        }
      },
      "required": [
        "cmd"
      ]
    },
    "AgentCatalogAction": {
      "type": "object",
      "properties": {
        "config": {
          "description": "Action config.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentCatalogActionConfig"
          }
        },
        "description": {
          "type": "string",
          "description": "Short descripton of the agent actions.",
          "example": "Start the execution."
        },
        "status": {
          "type": "string",
          "enum": [
            "started",
            "stopped",
            "unknown"
          ],
          "example": "started",
          "description": "Update the status the of the agent-instance if the command is executed correctly."
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "start",
            "stop",
            "restart"
          ],
          "description": "Action name",
          "example": "start"
        }
      },
      "required": [
        "config",
        "id"
      ]
    },
    "AgentCatalogParameterConfig": {
      "type": "object",
      "properties": {
        "schema": {
          "type": "string",
          "enum": [
            "yaml",
            "json",
            "properties"
          ],
          "description": "Schema of the parameter file",
          "example": "yaml"
        },
        "source": {
          "type": "string",
          "description": "Path of the source parameter file",
          "example": "/usr/share/filebeat/filebeat.yml"
        },
        "path": {
          "type": "string",
          "description": "Path of the parameter value in the file",
          "example": "enabled"
        }
      },
      "required": [
        "path",
        "schema",
        "source"
      ]
    },
    "AgentCatalogParameter": {
      "type": "object",
      "properties": {
        "example": {
          "type": "string",
          "description": "Example of parameter value.",
          "example": "10s"
        },
        "type": {
          "type": "string",
          "description": "Parameter type.",
          "example": "integer",
          "enum": [
            "integer",
            "number",
            "time-duration",
            "string",
            "choice",
            "boolean",
            "binary"
          ]
        },
        "list": {
          "type": "boolean",
          "description": "Indicate if the parameter can have multiple values.",
          "example": true
        },
        "config": {
          "description": "Parameter configuration.",
          "allOf": [
            {
              "$ref": "#/definitions/AgentCatalogParameterConfig"
            }
          ]
        },
        "values": {
          "type": "string",
          "example": "mysql",
          "description": "Possible values if the parameter type is choice."
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "Parameter id.",
          "example": "log-period"
        },
        "description": {
          "type": "string",
          "example": "Enable the agent.",
          "description": "Short description of the parameter."
        }
      },
      "required": [
        "config",
        "id",
        "type"
      ]
    },
    "AgentCatalog": {
      "type": "object",
      "properties": {
        "actions": {
          "description": "Action properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentCatalogAction"
          }
        },
        "parameters": {
          "description": "Parameter properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentCatalogParameter"
          }
        },
        "description": {
          "type": "string",
          "description": "Short description of the agent.",
          "example": "Collect system metrics from execution environments."
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "example": "filebeat",
          "description": "Id of the agent in the catalog."
        }
      },
      "required": [
        "id"
      ]
    },
    "AgentInstanceParameter": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Paremeter value.",
          "example": "10s"
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "Parameter id.",
          "example": "period"
        }
      },
      "required": [
        "id",
        "value"
      ]
    },
    "AgentInstance": {
      "type": "object",
      "properties": {
        "agent_catalog_id": {
          "type": "string",
          "example": "filebeat",
          "description": "Id of the agent in the catalog."
        },
        "exec_env_id": {
          "type": "string",
          "example": "apache",
          "description": "Id of the execution environment where the agent instance is installed."
        },
        "status": {
          "type": "string",
          "example": "started",
          "description": "Status of the agent instance",
          "enum": [
            "started",
            "stopped",
            "unknown"
          ]
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "example": "filebeat@apache",
          "description": "Id of the agent instance installed in an execution environment."
        },
        "parameters": {
          "description": "List of agent instance parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentInstanceParameter"
          }
        },
        "description": {
          "type": "string",
          "description": "Short description of the agent installed in the execution environment.",
          "example": "Collect system metrics from execution environments."
        }
      },
      "required": [
        "agent_catalog_id",
        "exec_env_id",
        "id",
        "status"
      ]
    },
    "Connection": {
      "type": "object",
      "properties": {
        "network_link_id": {
          "type": "string",
          "example": "net-link-1",
          "description": "Id of the connected network link."
        },
        "exec_env_id": {
          "type": "string",
          "description": "Id of the connected execution environment.",
          "example": "apache"
        },
        "description": {
          "type": "string",
          "description": "Short description of the connection.",
          "example": "Added to this network for debug purposes."
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "example": "conn-1",
          "description": "Id of connection."
        }
      },
      "required": [
        "exec_env_id",
        "id",
        "network_link_id"
      ]
    },
    "Data": {
      "type": "object",
      "properties": {
        "timestamp_agent": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the agent instance collected the data",
          "example": "2019_02_14 15:23:30"
        },
        "ebpf_program_instance_id": {
          "type": "string",
          "description": "Id of the eBPF program instance in the execution\n                                                  environment that collected the data",
          "example": "packet-capture@apache"
        },
        "agent_instance_id": {
          "type": "string",
          "description": "Id of the agent instance in the execution environment\n                                              that collected the data",
          "example": "filebeat@apache"
        },
        "timestamp_event": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the event related to the collected data",
          "example": "2019_02_14 15:23:30"
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "Id of the data.",
          "example": "BXrHRn5RPU55Qh9JwMZn"
        }
      },
      "required": [
        "id"
      ]
    },
    "eBPFProgramParameterCatalog": {
      "type": "object",
      "properties": {
        "example": {
          "type": "string",
          "description": "Example of parameter value.",
          "example": "eno0"
        },
        "type": {
          "type": "string",
          "description": "Parameter type.",
          "example": "integer",
          "enum": [
            "integer",
            "number",
            "time-duration",
            "string",
            "choice",
            "boolean",
            "binary"
          ]
        },
        "list": {
          "type": "boolean",
          "description": "Indicate if the parameter can have multiple values.",
          "example": true
        },
        "values": {
          "type": "array",
          "description": "Possible values if the parameter type is choice.",
          "items": {
            "type": "string",
            "example": [
              "yes",
              "no"
            ]
          }
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "Parameter id.",
          "example": "interface"
        },
        "description": {
          "type": "string",
          "description": "Short description of the parameter.",
          "example": "Network Interface to attach."
        }
      },
      "required": [
        "id",
        "type"
      ]
    },
    "eBPFProgramCatalogOpenMetricsMetadataLabel": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Label value.",
          "example": "UDP"
        },
        "name": {
          "type": "string",
          "description": "Label name.",
          "example": "IP_PROTO"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "eBPFProgramCatalogOpenMetricsMetadata": {
      "type": "object",
      "properties": {
        "help": {
          "type": "string",
          "description": "Metric help.",
          "example": "This metric represents the number of packets that has traveled trough this probe."
        },
        "type": {
          "type": "string",
          "description": "Metric type.",
          "example": "counter"
        },
        "labels": {
          "description": "Labels of Open Metrics Metadata.",
          "allOf": [
            {
              "$ref": "#/definitions/eBPFProgramCatalogOpenMetricsMetadataLabel"
            }
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "eBPFProgramCatalogMetric": {
      "type": "object",
      "properties": {
        "map-name": {
          "type": "string",
          "description": "Mapping value in the code.",
          "example": "PKT_COUNTER"
        },
        "open-metrics-metadata": {
          "description": "Open Metrics Metadata.",
          "allOf": [
            {
              "$ref": "#/definitions/eBPFProgramCatalogOpenMetricsMetadata"
            }
          ]
        },
        "name": {
          "type": "string",
          "description": "Metric name.",
          "example": "packets_total"
        }
      },
      "required": [
        "map-name",
        "name"
      ]
    },
    "eBPFProgramConfigCatalog": {
      "type": "object",
      "properties": {
        "metrics": {
          "description": "eBPF program metrics.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eBPFProgramCatalogMetric"
          }
        },
        "code": {
          "type": "string",
          "description": "Code the eBPF program."
        }
      },
      "required": [
        "code"
      ]
    },
    "eBPFProgramCatalog": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eBPFProgramParameterCatalog"
          }
        },
        "config": {
          "$ref": "#/definitions/eBPFProgramConfigCatalog"
        },
        "description": {
          "type": "string",
          "description": "Description of eBPF program.",
          "example": "Transparent service to capture packets flowing through the interface it is attached to, apply filters and obtain capture in .pcap format."
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "Id of the eBPF program in the catalog.",
          "example": "packet-capture"
        }
      },
      "required": [
        "config",
        "id"
      ]
    },
    "eBPFProgramInstance": {
      "type": "object",
      "properties": {
        "exec_env_id": {
          "type": "string",
          "description": "Id of the execution environment where the eBPF program\n                                                    instance is installed",
          "example": "apache"
        },
        "ebpf_program_catalog_id": {
          "type": "string",
          "description": "Id of the agent in the catalog.",
          "example": "packet-capture"
        },
        "description": {
          "type": "string",
          "description": "Short description of the agent installed in the execution environment.",
          "example": "Collect system metrics from Apache HTTP Web Server."
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "example": "packet-capture@apache",
          "description": "Id of the eBPF program installed in an execution environment."
        }
      },
      "required": [
        "ebpf_program_catalog_id",
        "exec_env_id",
        "id"
      ]
    },
    "LCP": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "TCP port number of LCP in the execution environment.",
          "example": 5000
        },
        "last_hearbeat": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the last hearbeat between the LCP and CB.",
          "example": "2019_02_14 15:23:30"
        },
        "password": {
          "type": "string",
          "description": "Password to connect from the CB to the LCP.",
          "example": "22c6d368beabf9de1ea03e010010758a394c37c3b18aa0705b8634f5"
        },
        "username": {
          "type": "string",
          "description": "Username to connect from the CB to the LCP.",
          "example": "22c6d368beabf9de1ea03e010010758a394c37c3b18aa0705b8634f5"
        },
        "cb_password": {
          "type": "string",
          "description": "Hashed password assigned to LCP to connect with the CB.",
          "example": "22c6d368beabf9de1ea03e010010758a394c37c3b18aa0705b8634f5"
        },
        "cb_expiration": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime until the authentication with the CB is valid.",
          "example": "2019_02_14 15:23:30"
        }
      },
      "required": [
        "port"
      ]
    },
    "ExecEnv": {
      "type": "object",
      "properties": {
        "type_id": {
          "type": "string",
          "example": "vm",
          "description": "Id of the execution environment type."
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "example": "apache",
          "description": "Id of the execution environment."
        },
        "hostname": {
          "type": "string",
          "example": "192.168.1.2",
          "description": "Hostname of the execution environment."
        },
        "description": {
          "type": "string",
          "description": "Short description of the execution environment,",
          "example": "Apache HTTP Web Server."
        },
        "lcp": {
          "description": "Data related to the LCP.",
          "allOf": [
            {
              "$ref": "#/definitions/LCP"
            }
          ]
        }
      },
      "required": [
        "hostname",
        "id",
        "lcp",
        "type_id"
      ]
    },
    "ExecEnvType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the execution environment.",
          "example": "Virtual Machine"
        },
        "description": {
          "type": "string",
          "example": "Linux container.",
          "description": "Short description of the type."
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "example": "vm",
          "description": "Id of the execution environment type."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "NetworkLink": {
      "type": "object",
      "properties": {
        "type_id": {
          "type": "string",
          "description": "Id of the network link type.",
          "example": "pnt2pnt"
        },
        "description": {
          "type": "string",
          "description": "Short description of the network link,",
          "example": "Allow communication between front-end and back-end services."
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "example": "net-link-1",
          "description": "Id of the network link."
        }
      },
      "required": [
        "id",
        "type_id"
      ]
    },
    "NetworkLinkType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the network link type.",
          "example": "Point to point"
        },
        "description": {
          "type": "string",
          "description": "Short description of the network link type,",
          "example": "Communications connection between two communication endpoints."
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "example": "pnt2pnt",
          "description": "Id of the network link type."
        }
      },
      "required": [
        "id",
        "name"
      ]
    }
  }
}