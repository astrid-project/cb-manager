{
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "agent-catalog",
      "description": "Represents an agent in the catalog."
    },
    {
      "name": "agent-catalog",
      "description": "Represents an agent in the catalog."
    },
    {
      "name": "agent-instance",
      "description": "Represents an agent instance installed in an execution environment."
    },
    {
      "name": "agent-instance",
      "description": "Represents an agent instance installed in an execution environment."
    },
    {
      "name": "connection",
      "description": "Represents an connection between execution environments and network links."
    },
    {
      "name": "connection",
      "description": "Represents an connection between execution environments and network links."
    },
    [],
    {
      "name": "data",
      "description": "Represents the stored data."
    },
    {
      "name": "data",
      "description": "Represents the stored data."
    },
    {
      "name": "ebpf-program-catalog",
      "description": "Represents an eBPF program in the catalog."
    },
    {
      "name": "ebpf-program-catalog",
      "description": "Represents an eBPF program in the catalog."
    },
    {
      "name": "ebpf-program-instance",
      "description": "Represents an eBPF program instance installed in an execution environment."
    },
    {
      "name": "ebpf-program-instance",
      "description": "Represents an eBPF program instance installed in an execution environment."
    },
    {
      "name": "exec-env",
      "description": "Represents an execution environment."
    },
    {
      "name": "exec-env",
      "description": "Represents an execution environment."
    },
    {
      "name": "exec-env-type",
      "description": "Represents an execution environment type."
    },
    {
      "name": "exec-env-type",
      "description": "Represents an execution environment type."
    },
    {
      "name": "network-link",
      "description": "Represents a network link."
    },
    {
      "name": "network-link",
      "description": "Represents a network link."
    },
    {
      "name": "network-link-type",
      "description": "Represents a network link type."
    },
    {
      "name": "network-link-type",
      "description": "Represents a network link type."
    }
  ],
  "paths": {
    "/catalog/agent/": {
      "delete": {
        "summary": "< Agent catalog Delete (Single).",
        "description": "Delete the agent catalog with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "205": {
            "description": "< Agent catalog with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Agent catalog with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the agent catalog with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Agent catalog Read (Single).",
        "description": "Get the agent catalog with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "< Agent catalog with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent_Catalog"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Agent catalog based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get agent catalogs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Agent catalog Create (Single).",
        "description": "Create a new agent catalog with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent_Catalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "201": {
            "description": "< Agent catalog with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the agent catalog with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the agent catalog with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Agent catalog Update (Single).",
        "description": "Update the agent catalog with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent_Catalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "< Agent catalog with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update agent catalogs with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the agent catalog with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the agent catalog with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/catalog/agent/{id}": {
      "delete": {
        "summary": "< Agent catalog Delete (Single).",
        "description": "Delete the agent catalog with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "205": {
            "description": "< Agent catalog with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Agent catalog with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the agent catalog with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Agent catalog Read (Single).",
        "description": "Get the agent catalog with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "< Agent catalog with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent_Catalog"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Agent catalog based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get agent catalogs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Agent catalog Create (Single).",
        "description": "Create a new agent catalog with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent_Catalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "201": {
            "description": "< Agent catalog with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the agent catalog with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the agent catalog with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Agent catalog Update (Single).",
        "description": "Update the agent catalog with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent_Catalog"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "< Agent catalog with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update agent catalogs with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the agent catalog with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the agent catalog with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/instance/agent/": {
      "delete": {
        "summary": "< Agent instance Delete (Single).",
        "description": "Delete the agent instance with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "205": {
            "description": "< Agent instance with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Agent instance with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the agent instance with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Agent instance Read (Single).",
        "description": "Get the agent instance with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "< Agent instance with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent_Instance"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Agent instance based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get agent instances with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Agent instance Create (Single).",
        "description": "Create a new agent instance with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent_Instance"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "201": {
            "description": "< Agent instance with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the agent instance with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the agent instance with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Agent instance Update (Single).",
        "description": "Update the agent instance with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent_Instance"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "< Agent instance with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update agent instances with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the agent instance with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the agent instance with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/instance/agent/{id}": {
      "delete": {
        "summary": "< Agent instance Delete (Single).",
        "description": "Delete the agent instance with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "205": {
            "description": "< Agent instance with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Agent instance with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the agent instance with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Agent instance Read (Single).",
        "description": "Get the agent instance with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "< Agent instance with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent_Instance"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Agent instance based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get agent instances with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Agent instance Create (Single).",
        "description": "Create a new agent instance with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent_Instance"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "201": {
            "description": "< Agent instance with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the agent instance with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the agent instance with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Agent instance Update (Single).",
        "description": "Update the agent instance with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent_Instance"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "< Agent instance with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update agent instances with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the agent instance with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the agent instance with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/connection/": {
      "delete": {
        "summary": "< Connection Delete (Single).",
        "description": "Delete the connection with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "205": {
            "description": "< Connection with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Connection with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the connection with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Connection Read (Single).",
        "description": "Get the connection with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "< Connection with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Connection based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get connections with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Connection Create (Single).",
        "description": "Create a new connection with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "201": {
            "description": "< Connection with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the connection with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the connection with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Connection Update (Single).",
        "description": "Update the connection with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "< Connection with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update connections with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the connection with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the connection with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/connection/{id}": {
      "delete": {
        "summary": "< Connection Delete (Single).",
        "description": "Delete the connection with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "205": {
            "description": "< Connection with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Connection with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the connection with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Connection Read (Single).",
        "description": "Get the connection with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "< Connection with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Connection based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get connections with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Connection Create (Single).",
        "description": "Create a new connection with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "201": {
            "description": "< Connection with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the connection with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the connection with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Connection Update (Single).",
        "description": "Update the connection with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Connection"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "< Connection with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update connections with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the connection with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the connection with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/dashboard": {
      "get": {}
    },
    "/dashboard/{part}/{resource}": {
      "get": {}
    },
    "/data/": {
      "delete": {
        "summary": "< Data Delete (Single).",
        "description": "Delete the data with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "205": {
            "description": "< Data with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Data with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the data with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Data Read (Single).",
        "description": "Get the data with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "< Data with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Data based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get data with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Data Create (Single).",
        "description": "Create a new data with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "201": {
            "description": "< Data with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the data with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the data with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Data Update (Single).",
        "description": "Update the data with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "< Data with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update data with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the data with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the data with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/data/{id}": {
      "delete": {
        "summary": "< Data Delete (Single).",
        "description": "Delete the data with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "205": {
            "description": "< Data with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Data with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the data with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Data Read (Single).",
        "description": "Get the data with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "< Data with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Data based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get data with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Data Create (Single).",
        "description": "Create a new data with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "201": {
            "description": "< Data with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the data with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the data with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Data Update (Single).",
        "description": "Update the data with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Data"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "< Data with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update data with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the data with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the data with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/catalog/ebpf-program/": {
      "delete": {
        "summary": "< Ebpf program catalog Delete (Single).",
        "description": "Delete the eBPF program catalog with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "205": {
            "description": "< Ebpf program catalog with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Ebpf program catalog with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the eBPF program catalog with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Ebpf program catalog Read (Single).",
        "description": "Get the eBPF program catalog with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "< Ebpf program catalog with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPF_Program_Catalog"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Ebpf program catalog based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get eBPF program catalogs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Ebpf program catalog Create (Single).",
        "description": "Create a new eBPF program catalog with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPF_Program_Catalog"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "201": {
            "description": "< Ebpf program catalog with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the eBPF program catalog with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the eBPF program catalog with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Ebpf program catalog Update (Single).",
        "description": "Update the eBPF program catalog with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPF_Program_Catalog"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "< Ebpf program catalog with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update eBPF program catalogs with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the eBPF program catalog with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the eBPF program catalog with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/catalog/ebpf-program/{id}": {
      "delete": {
        "summary": "< Ebpf program catalog Delete (Single).",
        "description": "Delete the eBPF program catalog with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "205": {
            "description": "< Ebpf program catalog with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Ebpf program catalog with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the eBPF program catalog with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Ebpf program catalog Read (Single).",
        "description": "Get the eBPF program catalog with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "< Ebpf program catalog with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPF_Program_Catalog"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Ebpf program catalog based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get eBPF program catalogs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Ebpf program catalog Create (Single).",
        "description": "Create a new eBPF program catalog with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPF_Program_Catalog"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "201": {
            "description": "< Ebpf program catalog with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the eBPF program catalog with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the eBPF program catalog with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Ebpf program catalog Update (Single).",
        "description": "Update the eBPF program catalog with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPF_Program_Catalog"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "< Ebpf program catalog with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update eBPF program catalogs with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the eBPF program catalog with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the eBPF program catalog with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/instance/ebpf-program/": {
      "delete": {
        "summary": "< Ebpf program Delete (Single).",
        "description": "Delete the eBPF program with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "205": {
            "description": "< Ebpf program with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Ebpf program with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the eBPF program with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Ebpf program Read (Single).",
        "description": "Get the eBPF program with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "< Ebpf program with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPF_Program_Instance"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Ebpf program based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get eBPF programs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Ebpf program Create (Single).",
        "description": "Create a new eBPF program with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPF_Program_Instance"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "201": {
            "description": "< Ebpf program with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the eBPF program with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the eBPF program with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Ebpf program Update (Single).",
        "description": "Update the eBPF program with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPF_Program_Instance"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "< Ebpf program with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update eBPF programs with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the eBPF program with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the eBPF program with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/instance/ebpf-program/{id}": {
      "delete": {
        "summary": "< Ebpf program Delete (Single).",
        "description": "Delete the eBPF program with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "205": {
            "description": "< Ebpf program with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Ebpf program with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the eBPF program with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Ebpf program Read (Single).",
        "description": "Get the eBPF program with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "< Ebpf program with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPF_Program_Instance"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Ebpf program based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get eBPF programs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Ebpf program Create (Single).",
        "description": "Create a new eBPF program with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPF_Program_Instance"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "201": {
            "description": "< Ebpf program with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the eBPF program with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the eBPF program with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Ebpf program Update (Single).",
        "description": "Update the eBPF program with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eBPF_Program_Instance"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "< Ebpf program with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update eBPF programs with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the eBPF program with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the eBPF program with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/exec-env/": {
      "delete": {
        "summary": "< Execution environment Delete (Single).",
        "description": "Delete the execution environment with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "205": {
            "description": "< Execution environment with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Execution environment with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the execution environment with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Execution environment Read (Single).",
        "description": "Get the execution environment with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "< Execution environment with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Exec_Env"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Execution environment based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get execution environments with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Execution environment Create (Single).",
        "description": "Create a new execution environment with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Exec_Env"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "201": {
            "description": "< Execution environment with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the execution environment with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the execution environment with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Execution environment Update (Single).",
        "description": "Update the execution environment with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Exec_Env"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "< Execution environment with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update execution environments with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the execution environment with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the execution environment with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/exec-env/{id}": {
      "delete": {
        "summary": "< Execution environment Delete (Single).",
        "description": "Delete the execution environment with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "205": {
            "description": "< Execution environment with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Execution environment with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the execution environment with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Execution environment Read (Single).",
        "description": "Get the execution environment with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "< Execution environment with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Exec_Env"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Execution environment based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get execution environments with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Execution environment Create (Single).",
        "description": "Create a new execution environment with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Exec_Env"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "201": {
            "description": "< Execution environment with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the execution environment with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the execution environment with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Execution environment Update (Single).",
        "description": "Update the execution environment with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Exec_Env"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "< Execution environment with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update execution environments with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the execution environment with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the execution environment with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/type/exec-env/": {
      "delete": {
        "summary": "< Execution environment type Delete (Single).",
        "description": "Delete the execution environment type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "205": {
            "description": "< Execution environment type with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Execution environment type with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the execution environment type with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Execution environment type Read (Single).",
        "description": "Get the execution environment type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "< Execution environment type with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Exec_Env_Type"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Execution environment type based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get execution environment types with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Execution environment type Create (Single).",
        "description": "Create a new execution environment type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Exec_Env_Type"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "201": {
            "description": "< Execution environment type with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the execution environment type with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the execution environment type with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Execution environment type Update (Single).",
        "description": "Update the execution environment type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Exec_Env_Type"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "< Execution environment type with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update execution environment types with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the execution environment type with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the execution environment type with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/exec-env-type/{id}": {
      "delete": {
        "summary": "< Execution environment type Delete (Single).",
        "description": "Delete the execution environment type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "205": {
            "description": "< Execution environment type with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Execution environment type with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the execution environment type with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Execution environment type Read (Single).",
        "description": "Get the execution environment type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "< Execution environment type with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Exec_Env_Type"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Execution environment type based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get execution environment types with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Execution environment type Create (Single).",
        "description": "Create a new execution environment type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Exec_Env_Type"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "201": {
            "description": "< Execution environment type with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the execution environment type with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the execution environment type with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Execution environment type Update (Single).",
        "description": "Update the execution environment type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Exec_Env_Type"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "< Execution environment type with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update execution environment types with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the execution environment type with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the execution environment type with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/network-link/": {
      "delete": {
        "summary": "< Network link Delete (Single).",
        "description": "Delete the network link with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "205": {
            "description": "< Network link with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Network link with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the network link with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Network link Read (Single).",
        "description": "Get the network link with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "< Network link with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network_Link"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Network link based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get network links with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Network link Create (Single).",
        "description": "Create a new network link with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network_Link"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "201": {
            "description": "< Network link with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the network link with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the network link with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Network link Update (Single).",
        "description": "Update the network link with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network_Link"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "< Network link with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update network links with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the network link with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the network link with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/network-link/{id}": {
      "delete": {
        "summary": "< Network link Delete (Single).",
        "description": "Delete the network link with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "205": {
            "description": "< Network link with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Network link with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the network link with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Network link Read (Single).",
        "description": "Get the network link with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "< Network link with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network_Link"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Network link based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get network links with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Network link Create (Single).",
        "description": "Create a new network link with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network_Link"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "201": {
            "description": "< Network link with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the network link with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the network link with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Network link Update (Single).",
        "description": "Update the network link with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network_Link"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "< Network link with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update network links with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the network link with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the network link with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/type/network-link/": {
      "delete": {
        "summary": "< Network link type Delete (Single).",
        "description": "Delete the network link type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "205": {
            "description": "< Network link type with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Network link type with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the network link type with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Network link type Read (Single).",
        "description": "Get the network link type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "< Network link type with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network_Link_Type"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Network link type based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get network link types with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Network link type Create (Single).",
        "description": "Create a new network link type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network_Link_Type"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "201": {
            "description": "< Network link type with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the network link type with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the network link type with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Network link type Update (Single).",
        "description": "Update the network link type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network_Link_Type"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "< Network link type with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update network link types with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the network link type with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the network link type with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/type/network-link/{id}": {
      "delete": {
        "summary": "< Network link type Delete (Single).",
        "description": "Delete the network link type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "205": {
            "description": "< Network link type with the given `id` correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Network link type with the given `id` and based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to delete the network link type with the given `id` and based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "< Network link type Read (Single).",
        "description": "Get the network link type with the given `id` and filtered by the query in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/Query_Request"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "< Network link type with the given `id` and filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network_Link_Type"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "< Network link type based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to get network link types with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "< Network link type Create (Single).",
        "description": "Create a new network link type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network_Link_Type"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "201": {
            "description": "< Network link type with the given `id` correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response"
              }
            }
          },
          "204": {
            "description": "No content to create the network link type with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to create the network link type with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "< Network link type Update (Single).",
        "description": "Update the network link type with the given `id`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "String"
          },
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network_Link_Type"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "< Network link type with the given `id` correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update network link types with the given `id` and based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update of the network link type with the given `id` not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Not_Modified_Response"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update the network link type with the given `id` and based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Unprocessable_Entity_Response"
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "Context Broker Manager",
    "version": "1.1.0"
  },
  "swagger": "2.0",
  "definitions": {
    "Query_Request_Filter": {
      "type": "object",
      "properties": {
        "target": {
          "type": "string",
          "example": "id",
          "description": "The field to compare."
        },
        "expr": {
          "type": "string",
          "example": "apache",
          "description": "The expression to compare to the field."
        }
      },
      "required": [
        "expr",
        "target"
      ]
    },
    "Query_Request_Clause": {
      "type": "object",
      "properties": {
        "and": {
          "description": "All the clause has to be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Query_Request_Clause"
          }
        },
        "not": {
          "description": "The clause has to be not satisfied.",
          "allOf": [
            {
              "$ref": "#/definitions/Query_Request_Clause"
            }
          ]
        },
        "equals": {
          "description": "The target field must be equal to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/Query_Request_Filter"
            }
          ]
        },
        "reg_exp": {
          "description": "The target field must be satisfy the regular expression in expr.",
          "allOf": [
            {
              "$ref": "#/definitions/Query_Request_Filter"
            }
          ]
        },
        "or": {
          "description": "At least the clause has to be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Query_Request_Clause"
          }
        },
        "wildcard": {
          "description": "The target field must be satisfy the wildcard in expr.",
          "allOf": [
            {
              "$ref": "#/definitions/Query_Request_Filter"
            }
          ]
        },
        "lte": {
          "description": "The target field must be lower or equal to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/Query_Request_Filter"
            }
          ]
        },
        "lt": {
          "description": "The target field must be lower than the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/Query_Request_Filter"
            }
          ]
        },
        "gt": {
          "description": "The target field must be greater to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/Query_Request_Filter"
            }
          ]
        },
        "gte": {
          "description": "The target field must be greater or equal to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/Query_Request_Filter"
            }
          ]
        }
      }
    },
    "Query_Request_Limit": {
      "type": "object",
      "properties": {
        "to": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Ended index of the items to return."
        },
        "from": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Started index of the items to return."
        }
      }
    },
    "Query_Request_Order": {
      "type": "object",
      "properties": {
        "target": {
          "type": "string",
          "example": "name",
          "description": "The field to compare."
        },
        "mode": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "description": "Order mode."
        }
      },
      "required": [
        "mode",
        "target"
      ]
    },
    "Query_Request": {
      "type": "object",
      "properties": {
        "where": {
          "description": "Filter the items based on different conditions.",
          "allOf": [
            {
              "$ref": "#/definitions/Query_Request_Clause"
            }
          ]
        },
        "limit": {
          "description": "Limit the number of items to return.",
          "allOf": [
            {
              "$ref": "#/definitions/Query_Request_Limit"
            }
          ]
        },
        "select": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "id",
            "description": "Fields to return."
          }
        },
        "order": {
          "description": "Order the filtered items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Query_Request_Order"
          }
        }
      }
    },
    "Exception_Response": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string",
          "example": "lib/connection.py",
          "description": "Filename where the exception is raised."
        },
        "reason": {
          "type": "string",
          "example": "Connection timeout",
          "description": "Exception reason."
        },
        "line": {
          "type": "integer",
          "format": "int32",
          "example": 80,
          "description": "Line where the exception is raised."
        }
      },
      "required": [
        "filename",
        "line",
        "reason"
      ]
    },
    "Reset_Content_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "code": {
          "default": 205
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        },
        "error": {
          "default": false
        },
        "status": {
          "default": "Reset Content"
        }
      },
      "required": [
        "message"
      ]
    },
    "Bad_Request_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "code": {
          "default": 400
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Bad Request"
        }
      },
      "required": [
        "message"
      ]
    },
    "Unauthorized_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "code": {
          "default": 401
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Unauthorized"
        }
      },
      "required": [
        "message"
      ]
    },
    "Not_Found_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "code": {
          "default": 404
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Not Found"
        }
      },
      "required": [
        "message"
      ]
    },
    "Not_Acceptable_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "code": {
          "default": 406
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Not Acceptable"
        }
      },
      "required": [
        "message"
      ]
    },
    "Unsupported_Media_Type_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "code": {
          "default": 415
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Unsupported Media Type"
        }
      },
      "required": [
        "message"
      ]
    },
    "Unprocessable_Entity_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "code": {
          "default": 422
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Unprocessable Entity"
        }
      },
      "required": [
        "message"
      ]
    },
    "Internal_Server_Error_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "code": {
          "default": 500
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Internal Server Error"
        }
      },
      "required": [
        "message"
      ]
    },
    "Agent_Catalog_Resource_Config": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "example": "/usr/share/filebeat/filebeat.yml",
          "description": "File path"
        }
      },
      "required": [
        "path"
      ]
    },
    "Agent_Catalog_Resource": {
      "type": "object",
      "properties": {
        "example": {
          "example": "10s",
          "description": "Example of parameter value."
        },
        "config": {
          "description": "Resource configuration.",
          "allOf": [
            {
              "$ref": "#/definitions/Agent_Catalog_Resource_Config"
            }
          ]
        },
        "id": {
          "type": "string",
          "example": "filebeat-config",
          "description": "Resource id."
        },
        "description": {
          "type": "string",
          "example": "Enable the agent.",
          "description": "Short description of the parameter."
        }
      },
      "required": [
        "config",
        "id"
      ]
    },
    "Agent_Catalog_Action_Config": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "example": "-v",
          "description": "Action command argument"
        },
        "daemon": {
          "type": "string",
          "example": "firewall",
          "description": "Key used to execute the command as daemon."
        },
        "cmd": {
          "type": "string",
          "example": "service filebeat start",
          "description": "Action command."
        }
      },
      "required": [
        "cmd"
      ]
    },
    "Agent_Catalog_Action": {
      "type": "object",
      "properties": {
        "store": {
          "type": "boolean",
          "example": true,
          "description": "Indicate if the results of the actions are stored in the data parameter of the agent instance."
        },
        "description": {
          "type": "string",
          "example": "Start the execution of the agent.",
          "description": "Short description of the agent actions."
        },
        "id": {
          "type": "string",
          "example": "start",
          "description": "Action name"
        },
        "example": {
          "example": "forward",
          "description": "Example of action parameter."
        },
        "config": {
          "description": "Action config.",
          "allOf": [
            {
              "$ref": "#/definitions/Agent_Catalog_Action_Config"
            }
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "started",
            "stopped",
            "unknown"
          ],
          "example": "started",
          "description": "Update the status the of the agent-instance if the command is executed correctly."
        }
      },
      "required": [
        "config",
        "id"
      ]
    },
    "Agent_Catalog_Parameter_Config": {
      "type": "object",
      "properties": {
        "path": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "enabled",
            "description": "Path of the parameter value in the file"
          }
        },
        "schema": {
          "type": "string",
          "enum": [
            "properties",
            "json",
            "xml",
            "yaml"
          ],
          "example": "properties",
          "description": "Schema of the parameter file"
        },
        "source": {
          "type": "string",
          "example": "/usr/share/filebeat/filebeat.yml",
          "description": "Path of the source parameter file"
        }
      },
      "required": [
        "schema",
        "source"
      ]
    },
    "Agent_Catalog_Parameter": {
      "type": "object",
      "properties": {
        "list": {
          "type": "boolean",
          "example": true,
          "description": "Indicate if the parameter can have multiple values."
        },
        "values": {
          "type": "string",
          "example": "mysql",
          "description": "Possible values if the parameter type is choice."
        },
        "description": {
          "type": "string",
          "example": "Enable the agent.",
          "description": "Short description of the parameter."
        },
        "id": {
          "type": "string",
          "example": "log-period",
          "description": "Parameter id."
        },
        "example": {
          "example": "10s",
          "description": "Example of parameter value."
        },
        "config": {
          "description": "Parameter configuration.",
          "allOf": [
            {
              "$ref": "#/definitions/Agent_Catalog_Parameter_Config"
            }
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "binary",
            "boolean",
            "choice",
            "integer",
            "number",
            "time-duration",
            "string"
          ],
          "example": "binary",
          "description": "Parameter type."
        }
      },
      "required": [
        "config",
        "id",
        "type"
      ]
    },
    "Agent_Catalog": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Collect system metrics from execution environments.",
          "description": "Short description of the agent."
        },
        "resources": {
          "description": "Resource properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agent_Catalog_Resource"
          }
        },
        "id": {
          "type": "string",
          "example": "filebeat",
          "description": "Id of the agent in the catalog."
        },
        "actions": {
          "description": "Action properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agent_Catalog_Action"
          }
        },
        "parameters": {
          "description": "Parameter properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agent_Catalog_Parameter"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "Created_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "code": {
          "default": 201
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        },
        "error": {
          "default": false
        },
        "status": {
          "default": "Created"
        }
      },
      "required": [
        "message"
      ]
    },
    "No_Content_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "code": {
          "default": 204
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        },
        "error": {
          "default": false
        },
        "status": {
          "default": "No Content"
        }
      },
      "required": [
        "message"
      ]
    },
    "Ok_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "code": {
          "default": 200
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        },
        "error": {
          "default": false
        },
        "status": {
          "default": "OK"
        }
      },
      "required": [
        "message"
      ]
    },
    "Not_Modified_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "code": {
          "default": 304
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        },
        "error": {
          "default": false
        },
        "status": {
          "default": "Not Modified"
        }
      },
      "required": [
        "message"
      ]
    },
    "Agent_Instance_Resource": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "Resource content."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the last time the resource data was updated or created correctly."
        },
        "id": {
          "type": "string",
          "example": "/opt/firewall.xml",
          "description": "Resource path."
        }
      },
      "required": [
        "content",
        "id",
        "timestamp"
      ]
    },
    "Agent_Instance_Action": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the last time the action was executed correctly."
        },
        "id": {
          "type": "string",
          "example": "list",
          "description": "Action id."
        },
        "data": {
          "example": "drop: all",
          "description": "Action data."
        }
      },
      "required": [
        "data",
        "id",
        "timestamp"
      ]
    },
    "Agent_Instance_Parameter": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the last time the parameter was set correctly."
        },
        "id": {
          "type": "string",
          "example": "period",
          "description": "Parameter id."
        }
      },
      "required": [
        "id",
        "timestamp"
      ]
    },
    "Agent_Instance": {
      "type": "object",
      "properties": {
        "agent_catalog_id": {
          "type": "string",
          "example": "filebeat",
          "description": "Id of the agent in the catalog."
        },
        "description": {
          "type": "string",
          "example": "Collect system metrics from execution environments.",
          "description": "Short description of the agent installed in the execution environment."
        },
        "resources": {
          "description": "List of agent instance resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agent_Instance_Resource"
          }
        },
        "exec_env_id": {
          "type": "string",
          "example": "apache",
          "description": "Id of the execution environment where the agent instance is installed."
        },
        "id": {
          "type": "string",
          "example": "filebeat@apache",
          "description": "Id of the agent instance installed in an execution environment."
        },
        "actions": {
          "description": "List of agent instance actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agent_Instance_Action"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "started",
            "stopped",
            "unknown"
          ],
          "example": "started",
          "description": "Status of the agent instance"
        },
        "parameters": {
          "description": "List of agent instance parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agent_Instance_Parameter"
          }
        }
      },
      "required": [
        "agent_catalog_id",
        "exec_env_id",
        "id",
        "status"
      ]
    },
    "Connection": {
      "type": "object",
      "properties": {
        "exec_env_id": {
          "type": "string",
          "example": "apache",
          "description": "Id of the connected execution environment."
        },
        "id": {
          "type": "string",
          "example": "conn-1",
          "description": "Id of connection."
        },
        "network_link_id": {
          "type": "string",
          "example": "net-link-1",
          "description": "Id of the connected network link."
        },
        "description": {
          "type": "string",
          "example": "Added to this network for debug purposes.",
          "description": "Short description of the connection."
        }
      },
      "required": [
        "exec_env_id",
        "id",
        "network_link_id"
      ]
    },
    "Data": {
      "type": "object",
      "properties": {
        "ebpf_program_instance_id": {
          "type": "string",
          "example": "packet-capture@apache",
          "description": "Id of the eBPF program instance in the execution\n                                                  environment that collected the data"
        },
        "id": {
          "type": "string",
          "example": "BXrHRn5RPU55Qh9JwMZn",
          "description": "Id of the data."
        },
        "timestamp_event": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:30",
          "description": "Timestamp of the event related to the collected data"
        },
        "agent_instance_id": {
          "type": "string",
          "example": "filebeat@apache",
          "description": "Id of the agent instance in the execution environment\n                                           that collected the data"
        },
        "timestamp_agent": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:30",
          "description": "Timestamp when the agent instance collected the data"
        }
      },
      "required": [
        "id"
      ]
    },
    "eBPF_Program_Catalog_Config_Metric_Open_Metrics_Metadata_Label": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "IP_PROTO",
          "description": "Label name."
        },
        "value": {
          "type": "string",
          "example": "UDP",
          "description": "Label value."
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "eBPF_Program_Catalog_Config_Metric_Open_Metrics_Metadata": {
      "type": "object",
      "properties": {
        "labels": {
          "description": "Labels of Open Metrics Metadata.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eBPF_Program_Catalog_Config_Metric_Open_Metrics_Metadata_Label"
          }
        },
        "help": {
          "type": "string",
          "example": "This metric represents the number of packets that has travelled trough this probe.",
          "description": "Metric help."
        },
        "type": {
          "type": "string",
          "example": "counter",
          "description": "Metric type."
        }
      },
      "required": [
        "type"
      ]
    },
    "eBPF_Program_Catalog_Config_Metric": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "packets_total",
          "description": "Metric name."
        },
        "open-metrics-metadata": {
          "description": "Open Metrics Metadata.",
          "allOf": [
            {
              "$ref": "#/definitions/eBPF_Program_Catalog_Config_Metric_Open_Metrics_Metadata"
            }
          ]
        },
        "map-name": {
          "type": "string",
          "example": "PKT_COUNTER",
          "description": "Mapping value in the code."
        }
      },
      "required": [
        "map-name",
        "name"
      ]
    },
    "eBPF_Program_Catalog_Config": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code of the eBPF program."
        },
        "metrics": {
          "description": "eBPF program metrics.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eBPF_Program_Catalog_Config_Metric"
          }
        }
      },
      "required": [
        "code"
      ]
    },
    "eBPF_Program_Catalog_Parameter": {
      "type": "object",
      "properties": {
        "list": {
          "type": "boolean",
          "example": true,
          "description": "Indicate if the parameter can have multiple values."
        },
        "values": {
          "type": "string",
          "example": "yes",
          "description": "Possible values if the parameter type is choice."
        },
        "description": {
          "type": "string",
          "example": "Network Interface to attach.",
          "description": "Short description of the parameter."
        },
        "id": {
          "type": "string",
          "example": "interface",
          "description": "Parameter id."
        },
        "example": {
          "example": "eno0",
          "description": "Example of parameter value."
        },
        "type": {
          "type": "string",
          "enum": [
            "binary",
            "boolean",
            "choice",
            "integer",
            "number",
            "time-duration",
            "string"
          ],
          "description": "Parameter type.",
          "example": "integer"
        }
      },
      "required": [
        "id",
        "type"
      ]
    },
    "eBPF_Program_Catalog": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/eBPF_Program_Catalog_Config"
        },
        "id": {
          "type": "string",
          "example": "packet-capture",
          "description": "Id of the eBPF_Program_ in the catalog."
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eBPF_Program_Catalog_Parameter"
          }
        },
        "description": {
          "type": "string",
          "example": "Transparent service to capture packets flowing through the interface it\n                                 is attached to, apply filters and obtain capture in .pcap format.",
          "description": "Description of eBPF program."
        }
      },
      "required": [
        "config",
        "id"
      ]
    },
    "eBPF_Program_Instance_Parameter": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the last time the parameter was set."
        },
        "id": {
          "type": "string",
          "example": "interface",
          "description": "Parameter id."
        }
      },
      "required": [
        "id",
        "timestamp"
      ]
    },
    "eBPF_Program_Instance": {
      "type": "object",
      "properties": {
        "ebpf_program_catalog_id": {
          "type": "string",
          "example": "packet-capture",
          "description": "Id of the agent in the catalog."
        },
        "description": {
          "type": "string",
          "example": "Collect system metrics from Apache HTTP Web Server.",
          "description": "Short description of the agent installed in the execution environment."
        },
        "exec_env_id": {
          "type": "string",
          "example": "apache",
          "description": "Id of the execution environment where the eBPF program\n                                     instance is installed"
        },
        "id": {
          "type": "string",
          "example": "packet-capture@apache",
          "description": "Id of the eBPF program installed in an execution environment."
        },
        "parameters": {
          "description": "List of eBPF program instance parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eBPF_Program_Instance_Parameter"
          }
        }
      },
      "required": [
        "ebpf_program_catalog_id",
        "exec_env_id",
        "id"
      ]
    },
    "LCP": {
      "type": "object",
      "properties": {
        "last_heartbeat": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:33",
          "description": "Timestamp of the expiration of the API access configuration."
        },
        "username": {
          "type": "string",
          "description": "Username for the CB to connect to this LCP."
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:30",
          "description": "Timestamp when the LCP is started"
        },
        "password": {
          "type": "string",
          "description": "Password for the CB to connect to this LCP."
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "example": 5000,
          "description": "TCP port number of LCP in the execution environment."
        }
      },
      "required": [
        "port"
      ]
    },
    "Exec_Env": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Apache HTTP Web Server.",
          "description": "Short description of the execution environment,"
        },
        "type_id": {
          "type": "string",
          "example": "vm",
          "description": "Id of the execution environment type."
        },
        "id": {
          "type": "string",
          "example": "apache",
          "description": "Id of the execution environment."
        },
        "lcp": {
          "description": "Data related to the LCP.",
          "allOf": [
            {
              "$ref": "#/definitions/LCP"
            }
          ]
        },
        "hostname": {
          "type": "string",
          "example": "192.168.1.2",
          "description": "Hostname of the execution environment."
        }
      },
      "required": [
        "hostname",
        "id",
        "lcp",
        "type_id"
      ]
    },
    "Exec_Env_Type": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Virtual Machine",
          "description": "Name of the execution environment."
        },
        "id": {
          "type": "string",
          "example": "vm",
          "description": "Id of the execution environment type."
        },
        "description": {
          "type": "string",
          "example": "Linux container.",
          "description": "Short description of the type."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Network_Link": {
      "type": "object",
      "properties": {
        "type_id": {
          "type": "string",
          "example": "pnt2pnt",
          "description": "Id of the network link type."
        },
        "id": {
          "type": "string",
          "example": "net-link-1",
          "description": "Id of the network link."
        },
        "description": {
          "type": "string",
          "example": "Allow communication between front-end and back-end services.",
          "description": "Short description of the network link,"
        }
      },
      "required": [
        "id",
        "type_id"
      ]
    },
    "Network_Link_Type": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Point to point",
          "description": "Name of the network link type."
        },
        "id": {
          "type": "string",
          "example": "pnt2pnt",
          "description": "Id of the network link type."
        },
        "description": {
          "type": "string",
          "example": "Communications connection between two communication endpoints.",
          "description": "Short description of the network link type,"
        }
      },
      "required": [
        "id",
        "name"
      ]
    }
  }
}