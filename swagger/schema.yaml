consumes:
- application/json
definitions:
  AgentCatalog:
    properties:
      actions:
        description: Action properties.
        items:
          $ref: '#/definitions/AgentCatalogAction'
        type: array
      description:
        description: Short description of the agent.
        example: Collect system metrics from execution environments.
        type: string
      id:
        description: Id of the agent in the catalog.
        example: filebeat
        type: string
      parameters:
        description: Parameter properties.
        items:
          $ref: '#/definitions/AgentCatalogParameter'
        type: array
      resources:
        description: Resource properties.
        items:
          $ref: '#/definitions/AgentCatalogResource'
        type: array
    required:
    - id
    type: object
  AgentCatalogAction:
    properties:
      config:
        allOf:
        - $ref: '#/definitions/AgentCatalogActionConfig'
        description: Action config.
      description:
        description: Short descripton of the agent actions.
        example: Start the execution of the agent.
        type: string
      example:
        description: Example of action parameter.
        example: forward
      id:
        description: Action name
        example: start
        type: string
      status:
        description: Update the status the of the agent-instance if the command is
          executed correctly.
        enum:
        - started
        - stopped
        - unknown
        example: started
        type: string
    required:
    - config
    - id
    type: object
  AgentCatalogActionConfig:
    properties:
      args:
        description: Action command argument
        example: -v
        type: string
      cmd:
        description: Action command.
        example: service filebeat start
        type: string
      daemon:
        description: Key used to execute the command as daemon.
        example: firewall
        type: string
    required:
    - cmd
    type: object
  AgentCatalogParameter:
    properties:
      config:
        allOf:
        - $ref: '#/definitions/AgentCatalogParameterConfig'
        description: Parameter configuration.
      description:
        description: Short description of the parameter.
        example: Enable the agent.
        type: string
      example:
        description: Example of parameter value.
        example: 10s
      id:
        description: Parameter id.
        example: log-period
        type: string
      list:
        description: Indicate if the parameter can have multiple values.
        example: true
        type: boolean
      type:
        description: Parameter type.
        enum:
        - integer
        - number
        - time-duration
        - string
        - choice
        - boolean
        - binary
        example: integer
        type: string
      values:
        description: Possible values if the parameter type is choice.
        example: mysql
        type: string
    required:
    - config
    - id
    - type
    type: object
  AgentCatalogParameterConfig:
    properties:
      path:
        items:
          description: Path of the parameter value in the file
          example: enabled
          type: string
        type: array
      schema:
        description: Schema of the parameter file
        enum:
        - yaml
        - json
        - properties
        example: yaml
        type: string
      source:
        description: Path of the source parameter file
        example: /usr/share/filebeat/filebeat.yml
        type: string
    required:
    - schema
    - source
    type: object
  AgentCatalogResource:
    properties:
      config:
        allOf:
        - $ref: '#/definitions/AgentCatalogResourceConfig'
        description: Resource configuration.
      description:
        description: Short description of the parameter.
        example: Enable the agent.
        type: string
      example:
        description: Example of parameter value.
        example: 10s
      id:
        description: Resource id.
        example: filebeat-config
        type: string
    required:
    - config
    - id
    type: object
  AgentCatalogResourceConfig:
    properties:
      path:
        description: File path
        example: /usr/share/filebeat/filebeat.yml
        type: string
    required:
    - path
    type: object
  AgentInstance:
    properties:
      agent_catalog_id:
        description: Id of the agent in the catalog.
        example: filebeat
        type: string
      description:
        description: Short description of the agent installed in the execution environment.
        example: Collect system metrics from execution environments.
        type: string
      exec_env_id:
        description: Id of the execution environment where the agent instance is installed.
        example: apache
        type: string
      id:
        description: Id of the agent instance installed in an execution environment.
        example: filebeat@apache
        type: string
      parameters:
        description: List of agent instance parameters.
        items:
          $ref: '#/definitions/AgentInstanceParameter'
        type: array
      status:
        description: Status of the agent instance
        enum:
        - started
        - stopped
        - unknown
        example: started
        type: string
    required:
    - agent_catalog_id
    - exec_env_id
    - id
    - status
    type: object
  AgentInstanceParameter:
    properties:
      id:
        description: Parameter id.
        example: period
        type: string
      value:
        description: Paremeter value.
        example: 10s
        type: string
    required:
    - id
    - value
    type: object
  Connection:
    properties:
      description:
        description: Short description of the connection.
        example: Added to this network for debug purposes.
        type: string
      exec_env_id:
        description: Id of the connected execution environment.
        example: apache
        type: string
      id:
        description: Id of connection.
        example: conn-1
        type: string
      network_link_id:
        description: Id of the connected network link.
        example: net-link-1
        type: string
    required:
    - exec_env_id
    - id
    - network_link_id
    type: object
  Data:
    properties:
      agent_instance_id:
        description: "Id of the agent instance in the execution environment\n    \
          \                                       that collected the data"
        example: filebeat@apache
        type: string
      ebpf_program_instance_id:
        description: "Id of the eBPF program instance in the execution\n         \
          \                                         environment that collected the\
          \ data"
        example: packet-capture@apache
        type: string
      id:
        description: Id of the data.
        example: BXrHRn5RPU55Qh9JwMZn
        type: string
      timestamp_agent:
        description: Timestamp when the agent instance collected the data
        example: 2019/02/14 15:23:30
        format: date-time
        type: string
      timestamp_event:
        description: Timestamp of the event related to the collected data
        example: 2019/02/14 15:23:30
        format: date-time
        type: string
    required:
    - id
    type: object
  ExecEnv:
    properties:
      description:
        description: Short description of the execution environment,
        example: Apache HTTP Web Server.
        type: string
      hostname:
        description: Hostname of the execution environment.
        example: 192.168.1.2
        type: string
      id:
        description: Id of the execution environment.
        example: apache
        type: string
      lcp:
        allOf:
        - $ref: '#/definitions/LCP'
        description: Data related to the LCP.
      type_id:
        description: Id of the execution environment type.
        example: vm
        type: string
    required:
    - hostname
    - id
    - lcp
    - type_id
    type: object
  ExecEnvType:
    properties:
      description:
        description: Short description of the type.
        example: Linux container.
        type: string
      id:
        description: Id of the execution environment type.
        example: vm
        type: string
      name:
        description: Name of the execution environment.
        example: Virtual Machine
        type: string
    required:
    - id
    - name
    type: object
  HTTPError:
    properties:
      description:
        description: Human readable message that describes the error.
        example: "Could not decode the request body, either because it was not\n \
          \                                               valid or because it was\
          \ not encoded as UTF-8."
        type: string
      title:
        description: Title error
        example: 400 Bad Request
        type: string
    required:
    - description
    - title
    type: object
  LCP:
    properties:
      last_heartbeat:
        description: Timestamp of the expiration of the API access configuration.
        example: 2019/02/14 15:23:33
        format: date-time
        type: string
      password:
        description: Password for the CB to connect to this LCP.
        type: string
      port:
        description: TCP port number of LCP in the execution environment.
        example: 5000
        format: int32
        type: integer
      started:
        description: Timestamp when the LCP is started
        example: 2019/02/14 15:23:30
        format: date-time
        type: string
      username:
        description: Username for the CB to connect to this LCP.
        type: string
    required:
    - port
    type: object
  NetworkLink:
    properties:
      description:
        description: Short description of the network link,
        example: Allow communication between front-end and back-end services.
        type: string
      id:
        description: Id of the network link.
        example: net-link-1
        type: string
      type_id:
        description: Id of the network link type.
        example: pnt2pnt
        type: string
    required:
    - id
    - type_id
    type: object
  NetworkLinkType:
    properties:
      description:
        description: Short description of the network link type,
        example: Communications connection between two communication endpoints.
        type: string
      id:
        description: Id of the network link type.
        example: pnt2pnt
        type: string
      name:
        description: Name of the network link type.
        example: Point to point
        type: string
    required:
    - id
    - name
    type: object
  QueryRequest:
    properties:
      limit:
        allOf:
        - $ref: '#/definitions/QueryRequestLimit'
        description: Limit the number of items to return.
      order:
        description: Order the filtered items.
        items:
          $ref: '#/definitions/QueryRequestOrder'
        type: array
      select:
        items:
          description: Fields to return.
          example: id
          type: string
        type: array
      where:
        allOf:
        - $ref: '#/definitions/QueryRequestClause'
        description: Filter the items based on different conditions.
    type: object
  QueryRequestClause:
    properties:
      and:
        description: All the clause has to be satisfied.
        items:
          $ref: '#/definitions/QueryRequestClause'
        type: array
      equals:
        allOf:
        - $ref: '#/definitions/QueryRequestFilter'
        description: The target field must be equal to the expr value.
      gt:
        allOf:
        - $ref: '#/definitions/QueryRequestFilter'
        description: The target field must be greater to the expr value.
      gte:
        allOf:
        - $ref: '#/definitions/QueryRequestFilter'
        description: The target field must be greater or equal to the expr value.
      lt:
        allOf:
        - $ref: '#/definitions/QueryRequestFilter'
        description: The target field must be lower than the expr value.
      lte:
        allOf:
        - $ref: '#/definitions/QueryRequestFilter'
        description: The target field must be lower or equal to the expr value.
      not:
        allOf:
        - $ref: '#/definitions/QueryRequestClause'
        description: The clause has to be not satisfied.
      or:
        description: At least the clause has to be satisfied.
        items:
          $ref: '#/definitions/QueryRequestClause'
        type: array
      reg_exp:
        allOf:
        - $ref: '#/definitions/QueryRequestFilter'
        description: The target field must be satisfy the regular expression in expr.
    type: object
  QueryRequestFilter:
    properties:
      expr:
        description: The expression to compare to the field.
        example: apache
        type: string
      target:
        description: The field to compare.
        example: id
        type: string
    required:
    - expr
    - target
    type: object
  QueryRequestLimit:
    properties:
      from:
        description: Started index of the items to return.
        example: 1
        format: int32
        type: integer
      to:
        description: Ended index of the items to return.
        example: 5
        format: int32
        type: integer
    type: object
  QueryRequestOrder:
    properties:
      mode:
        description: Order mode.
        enum:
        - asc
        - desc
        example: asc
        type: string
      target:
        description: The field to compare.
        example: name
        type: string
    required:
    - mode
    - target
    type: object
  eBPFProgramCatalog:
    properties:
      config:
        $ref: '#/definitions/eBPFProgramConfigCatalog'
      description:
        description: Description of eBPF program.
        example: "Transparent service to capture packets flowing through the interface\
          \ it\n                                 is attached to, apply filters and\
          \ obtain capture in .pcap format."
        type: string
      id:
        description: Id of the eBPFProgram in the catalog.
        example: packet-capture
        type: string
      parameters:
        items:
          $ref: '#/definitions/eBPFProgramParameterCatalog'
        type: array
    required:
    - config
    - id
    type: object
  eBPFProgramCatalogMetric:
    properties:
      map-name:
        description: Mapping value in the code.
        example: PKT_COUNTER
        type: string
      name:
        description: Metric name.
        example: packets_total
        type: string
      open-metrics-metadata:
        allOf:
        - $ref: '#/definitions/eBPFProgramCatalogOpenMetricsMetadata'
        description: Open Metrics Metadata.
    required:
    - map-name
    - name
    type: object
  eBPFProgramCatalogOpenMetricsMetadata:
    properties:
      help:
        description: Metric help.
        example: This metric represents the number of packets that has travelled trough
          this probe.
        type: string
      labels:
        description: Labels of Open Metrics Metadata.
        items:
          $ref: '#/definitions/eBPFProgramCatalogOpenMetricsMetadataLabel'
        type: array
      type:
        description: Metric type.
        example: counter
        type: string
    required:
    - type
    type: object
  eBPFProgramCatalogOpenMetricsMetadataLabel:
    properties:
      name:
        description: Label name.
        example: IP_PROTO
        type: string
      value:
        description: Label value.
        example: UDP
        type: string
    required:
    - name
    - value
    type: object
  eBPFProgramConfigCatalog:
    properties:
      code:
        description: Code of the eBPF program.
        type: string
      metrics:
        description: eBPF program metrics.
        items:
          $ref: '#/definitions/eBPFProgramCatalogMetric'
        type: array
    required:
    - code
    type: object
  eBPFProgramInstance:
    properties:
      description:
        description: Short description of the agent installed in the execution environment.
        example: Collect system metrics from Apache HTTP Web Server.
        type: string
      ebpf_program_catalog_id:
        description: Id of the agent in the catalog.
        example: packet-capture
        type: string
      exec_env_id:
        description: "Id of the execution environment where the eBPF program\n   \
          \                                  instance is installed"
        example: apache
        type: string
      id:
        description: Id of the eBPF program installed in an execution environment.
        example: packet-capture@apache
        type: string
    required:
    - ebpf_program_catalog_id
    - exec_env_id
    - id
    type: object
  eBPFProgramParameterCatalog:
    properties:
      description:
        description: Short description of the parameter.
        example: Network Interface to attach.
        type: string
      example:
        description: Example of parameter value.
        example: eno0
      id:
        description: Parameter id.
        example: interface
        type: string
      list:
        description: Indicate if the parameter can have multiple values.
        example: true
        type: boolean
      type:
        description: Parameter type.
        enum:
        - integer
        - number
        - time-duration
        - string
        - choice
        - boolean
        - binary
        example: integer
        type: string
      values:
        description: Possible values if the parameter type is choice.
        example: 'yes'
        type: string
    required:
    - id
    - type
    type: object
info:
  title: Context Broker Manager
  version: c2d1bf67d236012970bde545d66233df82aae8e4@master
paths:
  /catalog/agent/:
    delete:
      description: Delete the agent with the given `id` and filtered by the query
        in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Agent with the given `id` and filtered by the query in the
            request body deleted from the catalog.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Delete (Single)
      tags:
      - agent-catalog
    get:
      description: Get the agent in the catalog with the given `id` and filtered by
        the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Agent in the catalog with the given `id` and filtered by the
            query in the request body.
          schema:
            items:
              $ref: '#/definitions/AgentCatalog'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Read (Single)
      tags:
      - agent-catalog
    post:
      description: Add a new agent in the catalog with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/AgentCatalog'
          type: array
      responses:
        '200':
          description: Add a new agent in the catalog with the given `id`.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Creation (Single)
      tags:
      - agent-catalog
    put:
      description: Update the agent in the catalog with the given `id`
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/AgentCatalog'
          type: array
      responses:
        '200':
          description: Agent with the given `id` updated in the catalog.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Update (Single)
      tags:
      - agent-catalog
  /catalog/agent/{id}:
    delete:
      description: Delete the agent with the given `id` and filtered by the query
        in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Agent with the given `id` and filtered by the query in the
            request body deleted from the catalog.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Delete (Single)
      tags:
      - agent-catalog
    get:
      description: Get the agent in the catalog with the given `id` and filtered by
        the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Agent in the catalog with the given `id` and filtered by the
            query in the request body.
          schema:
            items:
              $ref: '#/definitions/AgentCatalog'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Read (Single)
      tags:
      - agent-catalog
    post:
      description: Add a new agent in the catalog with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/AgentCatalog'
          type: array
      responses:
        '200':
          description: Add a new agent in the catalog with the given `id`.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Creation (Single)
      tags:
      - agent-catalog
    put:
      description: Update the agent in the catalog with the given `id`
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/AgentCatalog'
          type: array
      responses:
        '200':
          description: Agent with the given `id` updated in the catalog.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Update (Single)
      tags:
      - agent-catalog
  /instance/agent/:
    delete:
      description: Remove the agent instance with the given `id` and filtered by the
        query in the request body from the execution-environments.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Agent instance with the given `id` and filtered by the query
            in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Instance Deletion (Single)
      tags:
      - agent-instance
    get:
      description: Get the agent instance with the given `id` installed in the execution-environments
        filtered by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Agent instance with the given `id` installed in the execution-environment
            filtered by the query in the request body.
          schema:
            items:
              $ref: '#/definitions/AgentInstance'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Instance Read (Single)
      tags:
      - agent-instance
    post:
      description: Install a new agent instance in the execution-environments with
        the given `id` .
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/AgentInstance'
          type: array
      responses:
        '200':
          description: Install a new agent instance in the execution-environments
            with the given `id` .
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Instance Creation (Single)
      tags:
      - agent-instance
    put:
      description: Update the agent instance in the execution-environments with the
        given `id` .
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/AgentInstance'
          type: array
      responses:
        '200':
          description: Agent instance with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Instance Update (Single)
      tags:
      - agent-instance
  /instance/agent/{id}:
    delete:
      description: Remove the agent instance with the given `id` and filtered by the
        query in the request body from the execution-environments.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Agent instance with the given `id` and filtered by the query
            in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Instance Deletion (Single)
      tags:
      - agent-instance
    get:
      description: Get the agent instance with the given `id` installed in the execution-environments
        filtered by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Agent instance with the given `id` installed in the execution-environment
            filtered by the query in the request body.
          schema:
            items:
              $ref: '#/definitions/AgentInstance'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Instance Read (Single)
      tags:
      - agent-instance
    post:
      description: Install a new agent instance in the execution-environments with
        the given `id` .
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/AgentInstance'
          type: array
      responses:
        '200':
          description: Install a new agent instance in the execution-environments
            with the given `id` .
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Instance Creation (Single)
      tags:
      - agent-instance
    put:
      description: Update the agent instance in the execution-environments with the
        given `id` .
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/AgentInstance'
          type: array
      responses:
        '200':
          description: Agent instance with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Agent Instance Update (Single)
      tags:
      - agent-instance
  /connection/:
    delete:
      description: Delete the connection between execution environments and network
        links with the given `id` and filtered by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Connection between execution environments and network links
            with the given `id` filtered by the query in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Connection Delete (Single)
      tags:
      - connection
    get:
      description: Get the connection between execution environments with the given
        `id` and network links filtered by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Connection between execution environments and network links
            with the given `id` and filtered by the query in the request body.
          schema:
            items:
              $ref: '#/definitions/Connection'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Connection Read (Single)
      tags:
      - connection
    put:
      description: Update the connection between execution environments and network
        links with the given `id`
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Connection'
          type: array
      responses:
        '200':
          description: Connection between execution environments and network links
            with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Connection Update (Single)
      tags:
      - connection
  /connection/{id}:
    delete:
      description: Delete the connection between execution environments and network
        links with the given `id` and filtered by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Connection between execution environments and network links
            with the given `id` filtered by the query in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Connection Delete (Single)
      tags:
      - connection
    get:
      description: Get the connection between execution environments with the given
        `id` and network links filtered by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Connection between execution environments and network links
            with the given `id` and filtered by the query in the request body.
          schema:
            items:
              $ref: '#/definitions/Connection'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Connection Read (Single)
      tags:
      - connection
    post:
      description: Install a new connection between execution environments and network
        links with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Connection'
          type: array
      responses:
        '200':
          description: Install a new connection between execution environments and
            network links with the given `id`.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Connection Creation (Single)
      tags:
      - connection
    put:
      description: Update the connection between execution environments and network
        links with the given `id`
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Connection'
          type: array
      responses:
        '200':
          description: Connection between execution environments and network links
            with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Connection Update (Single)
      tags:
      - connection
  /data/:
    delete:
      description: Delete data with the given `id` and filtered by the query in the
        request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Data with the given `id` and filtered by the query in the request
            body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Data Delete (Single)
      tags:
      - data
    get:
      description: Get the data with the given `id` and filtered by the query in the
        request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Data with the given `id` and filtered by the query in the request
            body.
          schema:
            items:
              $ref: '#/definitions/Data'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Data Read (Single)
      tags:
      - data
    post:
      description: Insert new data with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Data'
          type: array
      responses:
        '200':
          description: Insert new data with the given `id`.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Data Insert (Single)
      tags:
      - data
    put:
      description: Update data with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Data'
          type: array
      responses:
        '200':
          description: Data with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Data Update (Single)
      tags:
      - data
  /data/{id}:
    delete:
      description: Delete data with the given `id` and filtered by the query in the
        request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Data with the given `id` and filtered by the query in the request
            body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Data Delete (Single)
      tags:
      - data
    get:
      description: Get the data with the given `id` and filtered by the query in the
        request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Data with the given `id` and filtered by the query in the request
            body.
          schema:
            items:
              $ref: '#/definitions/Data'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Data Read (Single)
      tags:
      - data
    post:
      description: Insert new data with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Data'
          type: array
      responses:
        '200':
          description: Insert new data with the given `id`.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Data Insert (Single)
      tags:
      - data
    put:
      description: Update data with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Data'
          type: array
      responses:
        '200':
          description: Data with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Data Update (Single)
      tags:
      - data
  /catalog/ebpf-program/:
    delete:
      description: Delete the eBPF program with the given `id` and filtered by the
        query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: eBPF Program with the given `id` and filtered by the query
            in the request body deleted from the catalog.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Delete (Single)
      tags:
      - ebpf-program-catalog
    get:
      description: Get the eBPF program in the catalog with the given `id` and filtered
        by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: eBPF Program in the catalog with the given `id` and filtered
            by the query in the request body.
          schema:
            items:
              $ref: '#/definitions/eBPFProgramCatalog'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Read (Single)
      tags:
      - ebpf-program-catalog
    post:
      description: Add a new eBPF program in the catalog with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/eBPFProgramCatalog'
          type: array
      responses:
        '200':
          description: Add a new eBPF program in the catalog with the given `id`.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Creation (Single)
      tags:
      - ebpf-program-catalog
    put:
      description: Update the eBPF program in the catalog with the given `id`
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/eBPFProgramCatalog'
          type: array
      responses:
        '200':
          description: eBPF Program with the given `id` updated in the catalog.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Update (Single)
      tags:
      - ebpf-program-catalog
  /catalog/ebpf-program/{id}:
    delete:
      description: Delete the eBPF program with the given `id` and filtered by the
        query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: eBPF Program with the given `id` and filtered by the query
            in the request body deleted from the catalog.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Delete (Single)
      tags:
      - ebpf-program-catalog
    get:
      description: Get the eBPF program in the catalog with the given `id` and filtered
        by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: eBPF Program in the catalog with the given `id` and filtered
            by the query in the request body.
          schema:
            items:
              $ref: '#/definitions/eBPFProgramCatalog'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Read (Single)
      tags:
      - ebpf-program-catalog
    post:
      description: Add a new eBPF program in the catalog with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/eBPFProgramCatalog'
          type: array
      responses:
        '200':
          description: Add a new eBPF program in the catalog with the given `id`.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Creation (Single)
      tags:
      - ebpf-program-catalog
    put:
      description: Update the eBPF program in the catalog with the given `id`
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/eBPFProgramCatalog'
          type: array
      responses:
        '200':
          description: eBPF Program with the given `id` updated in the catalog.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Update (Single)
      tags:
      - ebpf-program-catalog
  /instance/ebpf-program/:
    delete:
      description: Remove the eBPF Program instance with the given `id` and filtered
        by the query in the request body from the execution-environments.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: eBPF program instance with the given `id` and filtered by the
            query in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Instance Deletion (Single)
      tags:
      - ebpf-program-instance
    get:
      description: Get the eBPF Program instance with the given `id` installed in
        the execution-environments filtered by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: eBPF program instance with the given `id` installed in the
            execution-environment filtered by the query in the request body.
          schema:
            items:
              $ref: '#/definitions/eBPFProgramInstance'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Instance Read (Single)
      tags:
      - ebpf-program-instance
    post:
      description: Install a new eBPF Program instance in the execution-environments
        with the given `id` .
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/eBPFProgramInstance'
          type: array
      responses:
        '200':
          description: Install a new eBPF Program instance in the execution-environments
            with the given `id` .
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Instance Creation (Single)
      tags:
      - ebpf-program-instance
    put:
      description: Update the eBPF Program instance in the execution-environments
        with the given `id` .
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/eBPFProgramInstance'
          type: array
      responses:
        '200':
          description: eBPF Program instance with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Instance Update (Single)
      tags:
      - ebpf-program-instance
  /instance/ebpf-program/{id}:
    delete:
      description: Remove the eBPF Program instance with the given `id` and filtered
        by the query in the request body from the execution-environments.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: eBPF program instance with the given `id` and filtered by the
            query in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Instance Deletion (Single)
      tags:
      - ebpf-program-instance
    get:
      description: Get the eBPF Program instance with the given `id` installed in
        the execution-environments filtered by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: eBPF program instance with the given `id` installed in the
            execution-environment filtered by the query in the request body.
          schema:
            items:
              $ref: '#/definitions/eBPFProgramInstance'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Instance Read (Single)
      tags:
      - ebpf-program-instance
    post:
      description: Install a new eBPF Program instance in the execution-environments
        with the given `id` .
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/eBPFProgramInstance'
          type: array
      responses:
        '200':
          description: Install a new eBPF Program instance in the execution-environments
            with the given `id` .
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Instance Creation (Single)
      tags:
      - ebpf-program-instance
    put:
      description: Update the eBPF Program instance in the execution-environments
        with the given `id` .
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/eBPFProgramInstance'
          type: array
      responses:
        '200':
          description: eBPF Program instance with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: eBPF Program Instance Update (Single)
      tags:
      - ebpf-program-instance
  /exec-env/:
    delete:
      description: Delete the execution environment with the given `id` and filtered
        by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Execution environment with the given `id` and filtered by the
            query in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Delete (Single)
      tags:
      - exec-env
    get:
      description: Get the execution environment with the given `id` and filtered
        by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Execution environment with the given `id` and filtered by the
            query in the request body.
          schema:
            items:
              $ref: '#/definitions/ExecEnv'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Read (Single)
      tags:
      - exec-env
    post:
      description: Create a new execution environment with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/ExecEnv'
          type: array
      responses:
        '200':
          description: Create a new execution environment with the given `id`.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Creation (Single)
      tags:
      - exec-env
    put:
      description: Update the execution environment with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/ExecEnv'
          type: array
      responses:
        '200':
          description: Execution environment with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Update (Single)
      tags:
      - exec-env
  /exec-env/{id}:
    delete:
      description: Delete the execution environment with the given `id` and filtered
        by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Execution environment with the given `id` and filtered by the
            query in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Delete (Single)
      tags:
      - exec-env
    get:
      description: Get the execution environment with the given `id` and filtered
        by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Execution environment with the given `id` and filtered by the
            query in the request body.
          schema:
            items:
              $ref: '#/definitions/ExecEnv'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Read (Single)
      tags:
      - exec-env
    post:
      description: Create a new execution environment with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/ExecEnv'
          type: array
      responses:
        '200':
          description: Create a new execution environment with the given `id`.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Creation (Single)
      tags:
      - exec-env
    put:
      description: Update the execution environment with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/ExecEnv'
          type: array
      responses:
        '200':
          description: Execution environment with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Update (Single)
      tags:
      - exec-env
  /type/exec-env/:
    delete:
      description: Delete the execution environment type with the given `id` and filtered
        by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Execution environment type with the given `id` and filtered
            by the query in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Type Delete (Single)
      tags:
      - exec-env-type
    get:
      description: Get the execution environment type with the given `id` and filtered
        by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Execution environment type with the given `id` and filtered
            by the query in the request body.
          schema:
            items:
              $ref: '#/definitions/ExecEnvType'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Type Read (Single)
      tags:
      - exec-env-type
    post:
      description: Create new execution environment type with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/ExecEnvType'
          type: array
      responses:
        '200':
          description: Create new execution environment type with the given `id`.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Type Creation (Single)
      tags:
      - exec-env-type
    put:
      description: Update the execution environment type with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/ExecEnvType'
          type: array
      responses:
        '200':
          description: Execution environment type with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Type Update (Single)
      tags:
      - exec-env-type
  /exec-env-type/{id}:
    delete:
      description: Delete the execution environment type with the given `id` and filtered
        by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Execution environment type with the given `id` and filtered
            by the query in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Type Delete (Single)
      tags:
      - exec-env-type
    get:
      description: Get the execution environment type with the given `id` and filtered
        by the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Execution environment type with the given `id` and filtered
            by the query in the request body.
          schema:
            items:
              $ref: '#/definitions/ExecEnvType'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Type Read (Single)
      tags:
      - exec-env-type
    post:
      description: Create new execution environment type with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/ExecEnvType'
          type: array
      responses:
        '200':
          description: Create new execution environment type with the given `id`.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Type Creation (Single)
      tags:
      - exec-env-type
    put:
      description: Update the execution environment type with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/ExecEnvType'
          type: array
      responses:
        '200':
          description: Execution environment type with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Execution Environment Type Update (Single)
      tags:
      - exec-env-type
  /network-link/:
    delete:
      description: Delete the network link with the given `id` and filtered by the
        query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Network link with the given `id` and filtered by the query
            in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Delete (Single)
      tags:
      - network-link
    get:
      description: Get the network link with the given `id` and filtered by the query
        in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Network link with the given `id` and filtered by the query
            in the request body.
          schema:
            items:
              $ref: '#/definitions/NetworkLink'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Read (Single)
      tags:
      - network-link
    post:
      description: Create a new network link with the given `id` .
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/NetworkLink'
          type: array
      responses:
        '200':
          description: Create a new network link with the given `id` .
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Creation (Single)
      tags:
      - network-link
    put:
      description: Update the network link with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/NetworkLink'
          type: array
      responses:
        '200':
          description: Network link with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Update (Single)
      tags:
      - network-link
  /network-link/{id}:
    delete:
      description: Delete the network link with the given `id` and filtered by the
        query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Network link with the given `id` and filtered by the query
            in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Delete (Single)
      tags:
      - network-link
    get:
      description: Get the network link with the given `id` and filtered by the query
        in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Network link with the given `id` and filtered by the query
            in the request body.
          schema:
            items:
              $ref: '#/definitions/NetworkLink'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Read (Single)
      tags:
      - network-link
    post:
      description: Create a new network link with the given `id` .
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/NetworkLink'
          type: array
      responses:
        '200':
          description: Create a new network link with the given `id` .
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Creation (Single)
      tags:
      - network-link
    put:
      description: Update the network link with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/NetworkLink'
          type: array
      responses:
        '200':
          description: Network link with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Update (Single)
      tags:
      - network-link
  /type/network-link/:
    delete:
      description: Delete network link types filtered by the query in the request
        body.
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Network link types filtered by the query in the request body
            deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Type Delete (Multiple)
      tags:
      - network-link-type
    get:
      description: Get the list of network link types filtered by the query in the
        request body.
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: List of network link types filtered by the query in the request
            body.
          schema:
            items:
              $ref: '#/definitions/NetworkLinkType'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Type Read (Multiple)
      tags:
      - network-link-type
    post:
      description: Create new network link types.
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/NetworkLinkType'
          type: array
      responses:
        '200':
          description: Network link types created.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Type Creation (Multiple)
      tags:
      - network-link-type
    put:
      description: Update network link types.
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/NetworkLinkType'
          type: array
      responses:
        '200':
          description: Network link types updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Type Update (Multiple)
      tags:
      - network-link-type
  /type/network-link/{id}:
    delete:
      description: Delete the network link type with the given `id` and filtered by
        the query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Network link type with the given `id` and filtered by the query
            in the request body deleted.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Type Delete (Single)
      tags:
      - network-link-type
    get:
      description: Get the network link type with the given `id` and filtered by the
        query in the request body.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/QueryRequest'
      responses:
        '200':
          description: Network link type with the given `id` and filtered by the query
            in the request body.
          schema:
            items:
              $ref: '#/definitions/NetworkLinkType'
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Type Read (Single)
      tags:
      - network-link-type
    post:
      description: Create a new network link type with the given `id` .
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/NetworkLinkType'
          type: array
      responses:
        '200':
          description: Create a new network link type with the given `id` .
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/HTTPError'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Type Creation (Single)
      tags:
      - network-link-type
    put:
      description: Update the network link type with the given `id`.
      parameters:
      - in: path
        name: id
        required: true
        type: String
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/NetworkLinkType'
          type: array
      responses:
        '200':
          description: Network link type with the given `id` updated.
          schema:
            items:
              oneOf:
              - ResponseSchema
              - ErrorSchema
            type: array
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Network Link Type Update (Single)
      tags:
      - network-link-type
  /service-graph/:
    post: {}
produces:
- application/json
swagger: '2.0'
tags:
- description: Represents an agent in the catalog.
  name: agent-catalog
- description: Represents an agent in the catalog.
  name: agent-catalog
- description: Represents an agent instance installed in an execution environment.
  name: agent-instance
- description: Represents an agent instance installed in an execution environment.
  name: agent-instance
- description: Represents an connection between execution environments and network
    links.
  name: connection
- description: Represents an connection between execution environments and network
    links.
  name: connection
- description: Represents the stored data.
  name: data
- description: Represents the stored data.
  name: data
- description: Represents an eBPF program in the catalog.
  name: ebpf-program-catalog
- description: Represents an eBPF program in the catalog.
  name: ebpf-program-catalog
- description: Represents an eBPF program installed in an execution environment.
  name: ebpf-program-instance
- description: Represents an eBPF program installed in an execution environment.
  name: ebpf-program-instance
- description: Represents an execution environment.
  name: exec-env
- description: Represents an execution environment.
  name: exec-env
- description: Represents an execution environment type.
  name: exec-env-type
- description: Represents an execution environment type.
  name: exec-env-type
- description: Represents a network link.
  name: network-link
- description: Represents a network link.
  name: network-link
- description: Represents a network link type.
  name: network-link-type
- description: Represents a network link type.
  name: network-link-type
- []
